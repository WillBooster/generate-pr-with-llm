name: 'Generate PR with AI'
description: 'A GitHub Action that generates pull requests using AI (LLM).'
author: 'WillBooster Inc.'

inputs:
  issue-number:
    description: 'The issue (or PR) number to reference when generating the PR'
    required: true
  planning-model:
    description: 'LLM to use for planning code changes. Must use llmlite format: provider/model (e.g., openai/gpt-4.1, azure/gpt-4.1, gemini/gemini-2.5-pro, anthropic/claude-4-sonnet-latest, bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0, vertex/gemini-2.5-pro)'
    required: false
  two-staged-planning:
    description: 'Enable two-staged planning: first select relevant files, then generate detailed implementation plans (increases LLM cost but improves code quality)'
    required: false
    default: 'true'
  reasoning-effort:
    description: 'Constrains effort on reasoning for reasoning models. Supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used.'
    required: false
  coding-tool:
    description: 'Coding tool to use for making changes (aider, claude-code or codex)'
    required: false
    default: 'aider'
  repomix-extra-args:
    description: 'Extra arguments for repomix when generating context for planning'
    required: false
    default: '--compress --remove-empty-lines --include "src/**/*.{ts,tsx},**/*.md"'
  aider-extra-args:
    description: 'Additional arguments to pass to the aider command ("--yes-always --no-check-update --no-show-release-notes" is always applied)'
    required: false
    default: '--model gemini/gemini-2.5-pro --edit-format diff-fenced --no-gitignore'
  claude-code-extra-args:
    description: 'Additional arguments to pass to the claude-code command ("--dangerously-skip-permissions --print" is always applied)'
    required: false
    default: '--allowedTools Bash Edit Write'
  codex-extra-args:
    description: 'Additional arguments to pass to the codex command (nothing is always applied)'
    required: false
    default: '--approval-mode full-auto --quiet'
  test-command:
    description: 'Command to run after the coding tool applies changes. If it fails, the assistant will try to fix it.'
    required: false
  max-test-attempts:
    description: 'Maximum number of attempts to fix test failures'
    required: false
    default: '5'
  dry-run:
    description: 'Run without making actual changes (no branch creation, no PR)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 22 # for @openai/codex@latest
    - name: Run action
      run: node ${{ github.action_path }}/dist/action.js
      shell: bash
      env:
        INPUT_ISSUE-NUMBER: ${{ inputs.issue-number }}
        INPUT_PLANNING-MODEL: ${{ inputs.planning-model }}
        INPUT_TWO-STAGED-PLANNING: ${{ inputs.two-staged-planning }}
        INPUT_REASONING-EFFORT: ${{ inputs.reasoning-effort }}
        INPUT_CODING-TOOL: ${{ inputs.coding-tool }}
        INPUT_REPOMIX-EXTRA-ARGS: ${{ inputs.repomix-extra-args }}
        INPUT_AIDER-EXTRA-ARGS: ${{ inputs.aider-extra-args }}
        INPUT_CLAUDE-CODE-EXTRA-ARGS: ${{ inputs.claude-code-extra-args }}
        INPUT_CODEX-EXTRA-ARGS: ${{ inputs.codex-extra-args }}
        INPUT_TEST-COMMAND: ${{ inputs.test-command }}
        INPUT_MAX-TEST-ATTEMPTS: ${{ inputs.max-test-attempts }}
        INPUT_DRY-RUN: ${{ inputs.dry-run }}

branding:
  icon: 'git-pull-request'
  color: 'blue'
