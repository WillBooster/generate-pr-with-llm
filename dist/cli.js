import t from"node:process";import{strictEqual as e,notStrictEqual as n}from"node:assert";import{resolve as s,dirname as i,normalize as u,join as r,relative as o,extname as a,basename as D}from"node:path";import{statSync as l,readdirSync as c,readFileSync as h,writeFile as f}from"node:fs";import{format as d,inspect as p}from"node:util";import{fileURLToPath as g}from"node:url";import{createRequire as m}from"node:module";import{g as F,D as C,b as E,d as y,e as b,f as v,h as A,a as B,m as w}from"./main-B-2Gay3z.js";import"node:child_process";import"node:os";import"node:crypto";import"node:buffer";import"node:https";import"node:stream";import"node:http";import"node:punycode";import"node:zlib";import"node:querystring";import"node:net";import"node:tls";import"node:tty";import"node:events";const O={right:function(t,e){t=t.trim();const n=_.stringWidth(t);if(n<e)return" ".repeat(e-n)+t;return t},center:function(t,e){t=t.trim();const n=_.stringWidth(t);if(n>=e)return t;return" ".repeat(e-n>>1)+t}};class j{constructor(t){var e;this.width=t.width,this.wrap=null===(e=t.wrap)||void 0===e||e,this.rows=[]}span(...t){this.div(...t).span=!0}resetOutput(){this.rows=[]}div(...t){if(0===t.length&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...t)&&"string"==typeof t[0])return this.applyLayoutDSL(t[0]);const e=t.map((t=>"string"==typeof t?this.colFromString(t):t));return this.rows.push(e),e}shouldApplyLayoutDSL(...t){return 1===t.length&&"string"==typeof t[0]&&/[\t\n]/.test(t[0])}applyLayoutDSL(t){const e=t.split("\n").map((t=>t.split("\t")));let n=0;return e.forEach((t=>{t.length>1&&_.stringWidth(t[0])>n&&(n=Math.min(Math.floor(.5*this.width),_.stringWidth(t[0])))})),e.forEach((t=>{this.div(...t.map(((e,s)=>({text:e.trim(),padding:this.measurePadding(e),width:0===s&&t.length>1?n:void 0}))))})),this.rows[this.rows.length-1]}colFromString(t){return{text:t,padding:this.measurePadding(t)}}measurePadding(t){const e=_.stripAnsi(t);return[0,e.match(/\s*$/)[0].length,0,e.match(/^\s*/)[0].length]}toString(){const t=[];return this.rows.forEach((e=>{this.rowToString(e,t)})),t.filter((t=>!t.hidden)).map((t=>t.text)).join("\n")}rowToString(t,e){return this.rasterize(t).forEach(((n,s)=>{let i="";n.forEach(((n,u)=>{const{width:r}=t[u],o=this.negatePadding(t[u]);let a=n;if(o>_.stringWidth(n)&&(a+=" ".repeat(o-_.stringWidth(n))),t[u].align&&"left"!==t[u].align&&this.wrap){a=(0,O[t[u].align])(a,o),_.stringWidth(a)<o&&(a+=" ".repeat((r||0)-_.stringWidth(a)-1))}const D=t[u].padding||[0,0,0,0];D[3]&&(i+=" ".repeat(D[3])),i+=x(t[u],a,"| "),i+=a,i+=x(t[u],a," |"),D[1]&&(i+=" ".repeat(D[1])),0===s&&e.length>0&&(i=this.renderInline(i,e[e.length-1]))})),e.push({text:i.replace(/ +$/,""),span:t.span})})),e}renderInline(t,e){const n=t.match(/^ */),s=n?n[0].length:0,i=e.text,u=_.stringWidth(i.trimRight());return e.span?this.wrap?s<u?t:(e.hidden=!0,i.trimRight()+" ".repeat(s-u)+t.trimLeft()):(e.hidden=!0,i+t):t}rasterize(t){const e=[],n=this.columnWidths(t);let s;return t.forEach(((t,i)=>{t.width=n[i],s=this.wrap?_.wrap(t.text,this.negatePadding(t),{hard:!0}).split("\n"):t.text.split("\n"),t.border&&(s.unshift("."+"-".repeat(this.negatePadding(t)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(t)+2)+"'")),t.padding&&(s.unshift(...new Array(t.padding[0]||0).fill("")),s.push(...new Array(t.padding[2]||0).fill(""))),s.forEach(((t,n)=>{e[n]||e.push([]);const s=e[n];for(let t=0;t<i;t++)void 0===s[t]&&s.push("");s.push(t)}))})),e}negatePadding(t){let e=t.width||0;return t.padding&&(e-=(t.padding[3]||0)+(t.padding[1]||0)),t.border&&(e-=4),e}columnWidths(t){if(!this.wrap)return t.map((t=>t.width||_.stringWidth(t.text)));let e=t.length,n=this.width;const s=t.map((t=>{if(t.width)return e--,n-=t.width,t.width})),i=e?Math.floor(n/e):0;return s.map(((e,n)=>void 0===e?Math.max(i,function(t){const e=t.padding||[],n=1+(e[3]||0)+(e[1]||0);if(t.border)return n+4;return n}(t[n])):e))}}function x(t,e,n){return t.border?/[.']-+[.']/.test(e)?"":0!==e.trim().length?n:"  ":""}let _;const k=function({onlyFirst:t=!1}={}){const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|");return new RegExp(e,t?void 0:"g")}();function M(t){if("string"!=typeof t)throw new TypeError(`Expected a \`string\`, got \`${typeof t}\``);return t.replace(k,"")}function S(t,{ambiguousAsWide:e=!1}={}){return function(t){if(!Number.isSafeInteger(t))throw new TypeError(`Expected a code point, got \`${typeof t}\`.`)}(t),12288===(n=t)||n>=65281&&n<=65376||n>=65504&&n<=65510||function(t){return t>=4352&&t<=4447||8986===t||8987===t||9001===t||9002===t||t>=9193&&t<=9196||9200===t||9203===t||9725===t||9726===t||9748===t||9749===t||t>=9776&&t<=9783||t>=9800&&t<=9811||9855===t||t>=9866&&t<=9871||9875===t||9889===t||9898===t||9899===t||9917===t||9918===t||9924===t||9925===t||9934===t||9940===t||9962===t||9970===t||9971===t||9973===t||9978===t||9981===t||9989===t||9994===t||9995===t||10024===t||10060===t||10062===t||t>=10067&&t<=10069||10071===t||t>=10133&&t<=10135||10160===t||10175===t||11035===t||11036===t||11088===t||11093===t||t>=11904&&t<=11929||t>=11931&&t<=12019||t>=12032&&t<=12245||t>=12272&&t<=12287||t>=12289&&t<=12350||t>=12353&&t<=12438||t>=12441&&t<=12543||t>=12549&&t<=12591||t>=12593&&t<=12686||t>=12688&&t<=12773||t>=12783&&t<=12830||t>=12832&&t<=12871||t>=12880&&t<=42124||t>=42128&&t<=42182||t>=43360&&t<=43388||t>=44032&&t<=55203||t>=63744&&t<=64255||t>=65040&&t<=65049||t>=65072&&t<=65106||t>=65108&&t<=65126||t>=65128&&t<=65131||t>=94176&&t<=94180||94192===t||94193===t||t>=94208&&t<=100343||t>=100352&&t<=101589||t>=101631&&t<=101640||t>=110576&&t<=110579||t>=110581&&t<=110587||110589===t||110590===t||t>=110592&&t<=110882||110898===t||t>=110928&&t<=110930||110933===t||t>=110948&&t<=110951||t>=110960&&t<=111355||t>=119552&&t<=119638||t>=119648&&t<=119670||126980===t||127183===t||127374===t||t>=127377&&t<=127386||t>=127488&&t<=127490||t>=127504&&t<=127547||t>=127552&&t<=127560||127568===t||127569===t||t>=127584&&t<=127589||t>=127744&&t<=127776||t>=127789&&t<=127797||t>=127799&&t<=127868||t>=127870&&t<=127891||t>=127904&&t<=127946||t>=127951&&t<=127955||t>=127968&&t<=127984||127988===t||t>=127992&&t<=128062||128064===t||t>=128066&&t<=128252||t>=128255&&t<=128317||t>=128331&&t<=128334||t>=128336&&t<=128359||128378===t||128405===t||128406===t||128420===t||t>=128507&&t<=128591||t>=128640&&t<=128709||128716===t||t>=128720&&t<=128722||t>=128725&&t<=128727||t>=128732&&t<=128735||128747===t||128748===t||t>=128756&&t<=128764||t>=128992&&t<=129003||129008===t||t>=129292&&t<=129338||t>=129340&&t<=129349||t>=129351&&t<=129535||t>=129648&&t<=129660||t>=129664&&t<=129673||t>=129679&&t<=129734||t>=129742&&t<=129756||t>=129759&&t<=129769||t>=129776&&t<=129784||t>=131072&&t<=196605||t>=196608&&t<=262141}(t)||e&&function(t){return 161===t||164===t||167===t||168===t||170===t||173===t||174===t||t>=176&&t<=180||t>=182&&t<=186||t>=188&&t<=191||198===t||208===t||215===t||216===t||t>=222&&t<=225||230===t||t>=232&&t<=234||236===t||237===t||240===t||242===t||243===t||t>=247&&t<=250||252===t||254===t||257===t||273===t||275===t||283===t||294===t||295===t||299===t||t>=305&&t<=307||312===t||t>=319&&t<=322||324===t||t>=328&&t<=331||333===t||338===t||339===t||358===t||359===t||363===t||462===t||464===t||466===t||468===t||470===t||472===t||474===t||476===t||593===t||609===t||708===t||711===t||t>=713&&t<=715||717===t||720===t||t>=728&&t<=731||733===t||735===t||t>=768&&t<=879||t>=913&&t<=929||t>=931&&t<=937||t>=945&&t<=961||t>=963&&t<=969||1025===t||t>=1040&&t<=1103||1105===t||8208===t||t>=8211&&t<=8214||8216===t||8217===t||8220===t||8221===t||t>=8224&&t<=8226||t>=8228&&t<=8231||8240===t||8242===t||8243===t||8245===t||8251===t||8254===t||8308===t||8319===t||t>=8321&&t<=8324||8364===t||8451===t||8453===t||8457===t||8467===t||8470===t||8481===t||8482===t||8486===t||8491===t||8531===t||8532===t||t>=8539&&t<=8542||t>=8544&&t<=8555||t>=8560&&t<=8569||8585===t||t>=8592&&t<=8601||8632===t||8633===t||8658===t||8660===t||8679===t||8704===t||8706===t||8707===t||8711===t||8712===t||8715===t||8719===t||8721===t||8725===t||8730===t||t>=8733&&t<=8736||8739===t||8741===t||t>=8743&&t<=8748||8750===t||t>=8756&&t<=8759||8764===t||8765===t||8776===t||8780===t||8786===t||8800===t||8801===t||t>=8804&&t<=8807||8810===t||8811===t||8814===t||8815===t||8834===t||8835===t||8838===t||8839===t||8853===t||8857===t||8869===t||8895===t||8978===t||t>=9312&&t<=9449||t>=9451&&t<=9547||t>=9552&&t<=9587||t>=9600&&t<=9615||t>=9618&&t<=9621||9632===t||9633===t||t>=9635&&t<=9641||9650===t||9651===t||9654===t||9655===t||9660===t||9661===t||9664===t||9665===t||t>=9670&&t<=9672||9675===t||t>=9678&&t<=9681||t>=9698&&t<=9701||9711===t||9733===t||9734===t||9737===t||9742===t||9743===t||9756===t||9758===t||9792===t||9794===t||9824===t||9825===t||t>=9827&&t<=9829||t>=9831&&t<=9834||9836===t||9837===t||9839===t||9886===t||9887===t||9919===t||t>=9926&&t<=9933||t>=9935&&t<=9939||t>=9941&&t<=9953||9955===t||9960===t||9961===t||t>=9963&&t<=9969||9972===t||t>=9974&&t<=9977||9979===t||9980===t||9982===t||9983===t||10045===t||t>=10102&&t<=10111||t>=11094&&t<=11097||t>=12872&&t<=12879||t>=57344&&t<=63743||t>=65024&&t<=65039||65533===t||t>=127232&&t<=127242||t>=127248&&t<=127277||t>=127280&&t<=127337||t>=127344&&t<=127373||127375===t||127376===t||t>=127387&&t<=127404||t>=917760&&t<=917999||t>=983040&&t<=1048573||t>=1048576&&t<=1114109}(t)?2:1;var n}const $=new Intl.Segmenter,P=/^\p{Default_Ignorable_Code_Point}$/u;function I(t,e={}){if("string"!=typeof t||0===t.length)return 0;const{ambiguousIsNarrow:n=!0,countAnsiEscapeCodes:s=!1}=e;if(s||(t=M(t)),0===t.length)return 0;let i=0;const u={ambiguousAsWide:!n};for(const{segment:e}of $.segment(t)){const t=e.codePointAt(0);t<=31||t>=127&&t<=159||(t>=8203&&t<=8207||65279===t||t>=768&&t<=879||t>=6832&&t<=6911||t>=7616&&t<=7679||t>=8400&&t<=8447||t>=65056&&t<=65071||t>=55296&&t<=57343||t>=65024&&t<=65039||P.test(e)||(/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g.test(e)?i+=2:i+=S(t,u)))}return i}const N=(t=0)=>e=>`[${e+t}m`,W=(t=0)=>e=>`[${38+t};5;${e}m`,L=(t=0)=>(e,n,s)=>`[${38+t};2;${e};${n};${s}m`,z={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(z.modifier);Object.keys(z.color),Object.keys(z.bgColor);const H=function(){const t=new Map;for(const[e,n]of Object.entries(z)){for(const[e,s]of Object.entries(n))z[e]={open:`[${s[0]}m`,close:`[${s[1]}m`},n[e]=z[e],t.set(s[0],s[1]);Object.defineProperty(z,e,{value:n,enumerable:!1})}return Object.defineProperty(z,"codes",{value:t,enumerable:!1}),z.color.close="[39m",z.bgColor.close="[49m",z.color.ansi=N(),z.color.ansi256=W(),z.color.ansi16m=L(),z.bgColor.ansi=N(10),z.bgColor.ansi256=W(10),z.bgColor.ansi16m=L(10),Object.defineProperties(z,{rgbToAnsi256:{value:(t,e,n)=>t===e&&e===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(e/255*5)+Math.round(n/255*5),enumerable:!1},hexToRgb:{value:t=>{const e=/[a-f\d]{6}|[a-f\d]{3}/i.exec(t.toString(16));if(!e)return[0,0,0];let[n]=e;3===n.length&&(n=[...n].map((t=>t+t)).join(""));const s=Number.parseInt(n,16);return[s>>16&255,s>>8&255,255&s]},enumerable:!1},hexToAnsi256:{value:t=>z.rgbToAnsi256(...z.hexToRgb(t)),enumerable:!1},ansi256ToAnsi:{value:t=>{if(t<8)return 30+t;if(t<16)return t-8+90;let e,n,s;if(t>=232)e=(10*(t-232)+8)/255,n=e,s=e;else{const i=(t-=16)%36;e=Math.floor(t/36)/5,n=Math.floor(i/6)/5,s=i%6/5}const i=2*Math.max(e,n,s);if(0===i)return 30;let u=30+(Math.round(s)<<2|Math.round(n)<<1|Math.round(e));return 2===i&&(u+=60),u},enumerable:!1},rgbToAnsi:{value:(t,e,n)=>z.ansi256ToAnsi(z.rgbToAnsi256(t,e,n)),enumerable:!1},hexToAnsi:{value:t=>z.ansi256ToAnsi(z.hexToAnsi256(t)),enumerable:!1}}),z}(),T=new Set(["",""]),U="]8;;",R=t=>`${T.values().next().value}[${t}m`,q=t=>`${T.values().next().value}${U}${t}`,G=(t,e,n)=>{const s=[...e];let i=!1,u=!1,r=I(M(t.at(-1)));for(const[e,o]of s.entries()){const a=I(o);if(r+a<=n?t[t.length-1]+=o:(t.push(o),r=0),T.has(o)){i=!0;u=s.slice(e+1,e+1+4).join("")===U}i?u?""===o&&(i=!1,u=!1):"m"===o&&(i=!1):(r+=a,r===n&&e<s.length-1&&(t.push(""),r=0))}!r&&t.at(-1).length>0&&t.length>1&&(t[t.length-2]+=t.pop())},V=(t,e,n={})=>{if(!1!==n.trim&&""===t.trim())return"";let s,i,u="";const r=(t=>t.split(" ").map((t=>I(t))))(t);let o=[""];for(const[s,i]of t.split(" ").entries()){!1!==n.trim&&(o[o.length-1]=o.at(-1).trimStart());let t=I(o.at(-1));if(0!==s&&(t>=e&&(!1===n.wordWrap||!1===n.trim)&&(o.push(""),t=0),(t>0||!1===n.trim)&&(o[o.length-1]+=" ",t++)),n.hard&&r[s]>e){const n=e-t,u=1+Math.floor((r[s]-n-1)/e);Math.floor((r[s]-1)/e)<u&&o.push(""),G(o,i,e)}else{if(t+r[s]>e&&t>0&&r[s]>0){if(!1===n.wordWrap&&t<e){G(o,i,e);continue}o.push("")}t+r[s]>e&&!1===n.wordWrap?G(o,i,e):o[o.length-1]+=i}}!1!==n.trim&&(o=o.map((t=>(t=>{const e=t.split(" ");let n=e.length;for(;n>0&&!(I(e[n-1])>0);)n--;return n===e.length?t:e.slice(0,n).join(" ")+e.slice(n).join("")})(t))));const a=o.join("\n"),D=[...a];let l=0;for(const[t,e]of D.entries()){if(u+=e,T.has(e)){const{groups:t}=new RegExp(`(?:\\[(?<code>\\d+)m|\\${U}(?<uri>.*))`).exec(a.slice(l))||{groups:{}};if(void 0!==t.code){const e=Number.parseFloat(t.code);s=39===e?void 0:e}else void 0!==t.uri&&(i=0===t.uri.length?void 0:t.uri)}const n=H.codes.get(Number(s));"\n"===D[t+1]?(i&&(u+=q("")),s&&n&&(u+=R(n))):"\n"===e&&(s&&n&&(u+=R(s)),i&&(u+=q(i))),l+=e.length}return u};function Y(t,e,n){return String(t).normalize().replaceAll("\r\n","\n").split("\n").map((t=>V(t,e,n))).join("\n")}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
function K(t){if(t!==t.toLowerCase()&&t!==t.toUpperCase()||(t=t.toLowerCase()),-1===t.indexOf("-")&&-1===t.indexOf("_"))return t;{let e="",n=!1;const s=t.match(/^-+/);for(let i=s?s[0].length:0;i<t.length;i++){let s=t.charAt(i);n&&(n=!1,s=s.toUpperCase()),0===i||"-"!==s&&"_"!==s?"-"!==s&&"_"!==s&&(e+=s):n=!0}return e}}function Z(t,e){const n=t.toLowerCase();e=e||"-";let s="";for(let i=0;i<t.length;i++){const u=n.charAt(i),r=t.charAt(i);s+=u!==r&&i>0?`${e}${n.charAt(i)}`:r}return s}function J(t){return null!=t&&("number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||!/^0[^.]/.test(t)&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t)))}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var Q;
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
let X;!function(t){t.BOOLEAN="boolean",t.STRING="string",t.NUMBER="number",t.ARRAY="array"}(Q||(Q={}));function tt(t){return void 0!==t?t+1:1}function et(t){return"__proto__"===t?"___proto___":t}
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var nt,st,it;const ut=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):20,rt=null!==(st=null===(nt=null===process||void 0===process?void 0:process.versions)||void 0===nt?void 0:nt.node)&&void 0!==st?st:null===(it=null===process||void 0===process?void 0:process.version)||void 0===it?void 0:it.slice(1);if(rt){if(Number(rt.match(/^([^.]+)/)[1])<ut)throw Error(`yargs parser supports a minimum Node.js version of ${ut}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`)}const ot=process?process.env:{},at=m?m(import.meta.url):void 0,Dt=new class{constructor(t){X=t}parse(t,e){const n=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},e),s=function(t){if(Array.isArray(t))return t.map((t=>"string"!=typeof t?t+"":t));t=t.trim();let e=0,n=null,s=null,i=null;const u=[];for(let r=0;r<t.length;r++)n=s,s=t.charAt(r)," "!==s||i?(s===i?i=null:"'"!==s&&'"'!==s||i||(i=s),u[e]||(u[e]=""),u[e]+=s):" "!==n&&e++;return u}(t),i="string"==typeof t,u=function(t){const e=[],n=Object.create(null);let s=!0;Object.keys(t).forEach((function(n){e.push([].concat(t[n],n))}));for(;s;){s=!1;for(let t=0;t<e.length;t++)for(let n=t+1;n<e.length;n++){if(e[t].filter((function(t){return-1!==e[n].indexOf(t)})).length){e[t]=e[t].concat(e[n]),e.splice(n,1),s=!0;break}}}return e.forEach((function(t){const e=(t=t.filter((function(t,e,n){return n.indexOf(t)===e}))).pop();void 0!==e&&"string"==typeof e&&(n[e]=t)})),n}(Object.assign(Object.create(null),n.alias)),r=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},n.configuration),o=Object.assign(Object.create(null),n.default),a=n.configObjects||[],D=n.envPrefix,l=r["populate--"],c=l?"--":"_",h=Object.create(null),f=Object.create(null),d=n.__||X.format,p={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},g=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,m=new RegExp("^--"+r["negation-prefix"]+"(.+)");[].concat(n.array||[]).filter(Boolean).forEach((function(t){const e="object"==typeof t?t.key:t,n=Object.keys(t).map((function(t){return{boolean:"bools",string:"strings",number:"numbers"}[t]})).filter(Boolean).pop();n&&(p[n][e]=!0),p.arrays[e]=!0,p.keys.push(e)})),[].concat(n.boolean||[]).filter(Boolean).forEach((function(t){p.bools[t]=!0,p.keys.push(t)})),[].concat(n.string||[]).filter(Boolean).forEach((function(t){p.strings[t]=!0,p.keys.push(t)})),[].concat(n.number||[]).filter(Boolean).forEach((function(t){p.numbers[t]=!0,p.keys.push(t)})),[].concat(n.count||[]).filter(Boolean).forEach((function(t){p.counts[t]=!0,p.keys.push(t)})),[].concat(n.normalize||[]).filter(Boolean).forEach((function(t){p.normalize[t]=!0,p.keys.push(t)})),"object"==typeof n.narg&&Object.entries(n.narg).forEach((([t,e])=>{"number"==typeof e&&(p.nargs[t]=e,p.keys.push(t))})),"object"==typeof n.coerce&&Object.entries(n.coerce).forEach((([t,e])=>{"function"==typeof e&&(p.coercions[t]=e,p.keys.push(t))})),void 0!==n.config&&(Array.isArray(n.config)||"string"==typeof n.config?[].concat(n.config).filter(Boolean).forEach((function(t){p.configs[t]=!0})):"object"==typeof n.config&&Object.entries(n.config).forEach((([t,e])=>{"boolean"!=typeof e&&"function"!=typeof e||(p.configs[t]=e)}))),function(...t){t.forEach((function(t){Object.keys(t||{}).forEach((function(t){p.aliases[t]||(p.aliases[t]=[].concat(u[t]||[]),p.aliases[t].concat(t).forEach((function(e){if(/-/.test(e)&&r["camel-case-expansion"]){const n=K(e);n!==t&&-1===p.aliases[t].indexOf(n)&&(p.aliases[t].push(n),h[n]=!0)}})),p.aliases[t].concat(t).forEach((function(e){if(e.length>1&&/[A-Z]/.test(e)&&r["camel-case-expansion"]){const n=Z(e,"-");n!==t&&-1===p.aliases[t].indexOf(n)&&(p.aliases[t].push(n),h[n]=!0)}})),p.aliases[t].forEach((function(e){p.aliases[e]=[t].concat(p.aliases[t].filter((function(t){return e!==t})))})))}))}))}(n.key,u,n.default,p.arrays),Object.keys(o).forEach((function(t){(p.aliases[t]||[]).forEach((function(e){o[e]=o[t]}))}));let F=null;Object.keys(p.counts).find((t=>$(t,p.arrays)?(F=Error(d("Invalid configuration: %s, opts.count excludes opts.array.",t)),!0):!!$(t,p.nargs)&&(F=Error(d("Invalid configuration: %s, opts.count excludes opts.narg.",t)),!0)));let C=[];const E=Object.assign(Object.create(null),{_:[]}),y={};for(let t=0;t<s.length;t++){const e=s[t],n=e.replace(/^-{3,}/,"---");let i,u,o,a,D,l;if("--"!==e&&/^-/.test(e)&&I(e))b(e);else{if(n.match(/^---+(=|$)/)){b(e);continue}if(e.match(/^--.+=/)||!r["short-option-groups"]&&e.match(/^-.+=/))a=e.match(/^--?([^=]+)=([\s\S]*)$/),null!==a&&Array.isArray(a)&&a.length>=3&&($(a[1],p.arrays)?t=A(t,a[1],s,a[2]):!1!==$(a[1],p.nargs)?t=v(t,a[1],s,a[2]):B(a[1],a[2],!0));else if(e.match(m)&&r["boolean-negation"])a=e.match(m),null!==a&&Array.isArray(a)&&a.length>=2&&(u=a[1],B(u,!!$(u,p.arrays)&&[!1]));else if(e.match(/^--.+/)||!r["short-option-groups"]&&e.match(/^-[^-]+/))a=e.match(/^--?(.+)/),null!==a&&Array.isArray(a)&&a.length>=2&&(u=a[1],$(u,p.arrays)?t=A(t,u,s):!1!==$(u,p.nargs)?t=v(t,u,s):(D=s[t+1],void 0===D||D.match(/^-/)&&!D.match(g)||$(u,p.bools)||$(u,p.counts)?/^(true|false)$/.test(D)?(B(u,D),t++):B(u,N(u)):(B(u,D),t++)));else if(e.match(/^-.\..+=/))a=e.match(/^-([^=]+)=([\s\S]*)$/),null!==a&&Array.isArray(a)&&a.length>=3&&B(a[1],a[2]);else if(e.match(/^-.\..+/)&&!e.match(g))D=s[t+1],a=e.match(/^-(.\..+)/),null!==a&&Array.isArray(a)&&a.length>=2&&(u=a[1],void 0===D||D.match(/^-/)||$(u,p.bools)||$(u,p.counts)?B(u,N(u)):(B(u,D),t++));else if(e.match(/^-[^-]+/)&&!e.match(g)){o=e.slice(1,-1).split(""),i=!1;for(let n=0;n<o.length;n++){if(D=e.slice(n+2),o[n+1]&&"="===o[n+1]){l=e.slice(n+3),u=o[n],$(u,p.arrays)?t=A(t,u,s,l):!1!==$(u,p.nargs)?t=v(t,u,s,l):B(u,l),i=!0;break}if("-"!==D){if(/[A-Za-z]/.test(o[n])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(D)&&!1===$(D,p.bools)){B(o[n],D),i=!0;break}if(o[n+1]&&o[n+1].match(/\W/)){B(o[n],D),i=!0;break}B(o[n],N(o[n]))}else B(o[n],D)}u=e.slice(-1)[0],i||"-"===u||($(u,p.arrays)?t=A(t,u,s):!1!==$(u,p.nargs)?t=v(t,u,s):(D=s[t+1],void 0===D||/^(-|--)[^-]/.test(D)&&!D.match(g)||$(u,p.bools)||$(u,p.counts)?/^(true|false)$/.test(D)?(B(u,D),t++):B(u,N(u)):(B(u,D),t++)))}else if(e.match(/^-[0-9]$/)&&e.match(g)&&$(e.slice(1),p.bools))u=e.slice(1),B(u,N(u));else{if("--"===e){C=s.slice(t+1);break}if(r["halt-at-non-option"]){C=s.slice(t);break}b(e)}}}function b(t){const e=j("_",t);"string"!=typeof e&&"number"!=typeof e||E._.push(e)}function v(t,e,n,s){let i,u=$(e,p.nargs);if(u="number"!=typeof u||isNaN(u)?1:u,0===u)return W(s)||(F=Error(d("Argument unexpected for: %s",e))),B(e,N(e)),t;let o=W(s)?0:1;if(r["nargs-eats-options"])n.length-(t+1)+o<u&&(F=Error(d("Not enough arguments following: %s",e))),o=u;else{for(i=t+1;i<n.length&&(!n[i].match(/^-[^0-9]/)||n[i].match(g)||I(n[i]));i++)o++;o<u&&(F=Error(d("Not enough arguments following: %s",e)))}let a=Math.min(o,u);for(!W(s)&&a>0&&(B(e,s),a--),i=t+1;i<a+t+1;i++)B(e,n[i]);return t+a}function A(t,e,n,s){let u=[],a=s||n[t+1];const D=$(e,p.nargs);if($(e,p.bools)&&!/^(true|false)$/.test(a))u.push(!0);else if(W(a)||W(s)&&/^-/.test(a)&&!g.test(a)&&!I(a)){if(void 0!==o[e]){const t=o[e];u=Array.isArray(t)?t:[t]}}else{W(s)||u.push(O(e,s,!0));for(let s=t+1;s<n.length&&!(!r["greedy-arrays"]&&u.length>0||D&&"number"==typeof D&&u.length>=D)&&(a=n[s],!/^-/.test(a)||g.test(a)||I(a));s++)t=s,u.push(O(e,a,i))}return"number"==typeof D&&(D&&u.length<D||isNaN(D)&&0===u.length)&&(F=Error(d("Not enough arguments following: %s",e))),B(e,u),t}function B(t,e,n=i){if(/-/.test(t)&&r["camel-case-expansion"]){const e=t.split(".").map((function(t){return K(t)})).join(".");w(t,e)}const s=O(t,e,n),u=t.split(".");if(S(E,u,s),p.aliases[t]&&p.aliases[t].forEach((function(t){const e=t.split(".");S(E,e,s)})),u.length>1&&r["dot-notation"]&&(p.aliases[u[0]]||[]).forEach((function(e){let n=e.split(".");const i=[].concat(u);i.shift(),n=n.concat(i),(p.aliases[t]||[]).includes(n.join("."))||S(E,n,s)})),$(t,p.normalize)&&!$(t,p.arrays)){[t].concat(p.aliases[t]||[]).forEach((function(t){Object.defineProperty(y,t,{enumerable:!0,get:()=>e,set(t){e="string"==typeof t?X.normalize(t):t}})}))}}function w(t,e){p.aliases[t]&&p.aliases[t].length||(p.aliases[t]=[e],h[e]=!0),p.aliases[e]&&p.aliases[e].length||w(e,t)}function O(t,e,n){n&&(e=function(t){return"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]?t:t.substring(1,t.length-1)}(e)),($(t,p.bools)||$(t,p.counts))&&"string"==typeof e&&(e="true"===e);let s=Array.isArray(e)?e.map((function(e){return j(t,e)})):j(t,e);return $(t,p.counts)&&(W(s)||"boolean"==typeof s)&&(s=tt()),$(t,p.normalize)&&$(t,p.arrays)&&(s=Array.isArray(e)?e.map((t=>X.normalize(t))):X.normalize(e)),s}function j(t,e){if(!r["parse-positional-numbers"]&&"_"===t)return e;if(!$(t,p.strings)&&!$(t,p.bools)&&!Array.isArray(e)){(J(e)&&r["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${e}`)))||!W(e)&&$(t,p.numbers))&&(e=Number(e))}return e}function x(t,e){Object.keys(t).forEach((function(n){const s=t[n],i=e?e+"."+n:n;"object"==typeof s&&null!==s&&!Array.isArray(s)&&r["dot-notation"]?x(s,i):(!M(E,i.split("."))||$(i,p.arrays)&&r["combine-arrays"])&&B(i,s)}))}function _(t,e){if(void 0===D)return;const n="string"==typeof D?D:"",s=X.env();Object.keys(s).forEach((function(i){if(""===n||0===i.lastIndexOf(n,0)){const u=i.split("__").map((function(t,e){return 0===e&&(t=t.substring(n.length)),K(t)}));(e&&p.configs[u.join(".")]||!e)&&!M(t,u)&&B(u.join("."),s[i])}}))}function k(t,e,n,s=!1){Object.keys(n).forEach((function(i){M(t,i.split("."))||(S(t,i.split("."),n[i]),s&&(f[i]=!0),(e[i]||[]).forEach((function(e){M(t,e.split("."))||S(t,e.split("."),n[i])})))}))}function M(t,e){let n=t;r["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach((function(t){n=n[t]||{}}));const s=e[e.length-1];return"object"==typeof n&&s in n}function S(t,e,n){let s=t;r["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach((function(t){t=et(t),"object"==typeof s&&void 0===s[t]&&(s[t]={}),"object"!=typeof s[t]||Array.isArray(s[t])?(Array.isArray(s[t])?s[t].push({}):s[t]=[s[t],{}],s=s[t][s[t].length-1]):s=s[t]}));const i=et(e[e.length-1]),u=$(e.join("."),p.arrays),o=Array.isArray(n);let a=r["duplicate-arguments-array"];!a&&$(i,p.nargs)&&(a=!0,(!W(s[i])&&1===p.nargs[i]||Array.isArray(s[i])&&s[i].length===p.nargs[i])&&(s[i]=void 0)),n===tt()?s[i]=tt(s[i]):Array.isArray(s[i])?a&&u&&o?s[i]=r["flatten-duplicate-arrays"]?s[i].concat(n):(Array.isArray(s[i][0])?s[i]:[s[i]]).concat([n]):a||Boolean(u)!==Boolean(o)?s[i]=s[i].concat([n]):s[i]=n:void 0===s[i]&&u?s[i]=o?n:[n]:!a||void 0===s[i]||$(i,p.counts)||$(i,p.bools)?s[i]=n:s[i]=[s[i],n]}function $(t,e){const n=[].concat(p.aliases[t]||[],t),s=Object.keys(e),i=n.find((t=>s.includes(t)));return!!i&&e[i]}function P(t){const e=Object.keys(p);return[].concat(e.map((t=>p[t]))).some((function(e){return Array.isArray(e)?e.includes(t):e[t]}))}function I(t){return r["unknown-options-as-args"]&&function(t){if(t=t.replace(/^-{3,}/,"--"),t.match(g))return!1;if(function(t){if(t.match(g)||!t.match(/^-[^-]+/))return!1;let e,n=!0;const s=t.slice(1).split("");for(let i=0;i<s.length;i++){if(e=t.slice(i+2),!P(s[i])){n=!1;break}if(s[i+1]&&"="===s[i+1]||"-"===e||/[A-Za-z]/.test(s[i])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(e)||s[i+1]&&s[i+1].match(/\W/))break}return n}(t))return!1;return!function(t,...e){return[].concat(...e).some((function(e){const n=t.match(e);return n&&P(n[1])}))}(t,/^-+([^=]+?)=[\s\S]*$/,m,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}(t)}function N(t){return $(t,p.bools)||$(t,p.counts)||!(`${t}`in o)?(e=function(t){let e=Q.BOOLEAN;return $(t,p.strings)?e=Q.STRING:$(t,p.numbers)?e=Q.NUMBER:$(t,p.bools)?e=Q.BOOLEAN:$(t,p.arrays)&&(e=Q.ARRAY),e}(t),{[Q.BOOLEAN]:!0,[Q.STRING]:"",[Q.NUMBER]:void 0,[Q.ARRAY]:[]}[e]):o[t];var e}function W(t){return void 0===t}return _(E,!0),_(E,!1),function(t){const e=Object.create(null);k(e,p.aliases,o),Object.keys(p.configs).forEach((function(n){const s=t[n]||e[n];if(s)try{let t=null;const e=X.resolve(X.cwd(),s),i=p.configs[n];if("function"==typeof i){try{t=i(e)}catch(e){t=e}if(t instanceof Error)return void(F=t)}else t=X.require(e);x(t)}catch(e){"PermissionDenied"===e.name?F=e:t[n]&&(F=Error(d("Invalid JSON config file: %s",s)))}}))}(E),void 0!==a&&a.forEach((function(t){x(t)})),k(E,p.aliases,o,!0),function(t){let e;const n=new Set;Object.keys(t).forEach((function(s){if(!n.has(s)&&(e=$(s,p.coercions),"function"==typeof e))try{const i=j(s,e(t[s]));[].concat(p.aliases[s]||[],s).forEach((e=>{n.add(e),t[e]=i}))}catch(t){F=t}}))}(E),r["set-placeholder-key"]&&function(t){p.keys.forEach((e=>{~e.indexOf(".")||void 0===t[e]&&(t[e]=void 0)}))}(E),Object.keys(p.counts).forEach((function(t){M(E,t.split("."))||B(t,0)})),l&&C.length&&(E[c]=[]),C.forEach((function(t){E[c].push(t)})),r["camel-case-expansion"]&&r["strip-dashed"]&&Object.keys(E).filter((t=>"--"!==t&&t.includes("-"))).forEach((t=>{delete E[t]})),r["strip-aliased"]&&[].concat(...Object.keys(u).map((t=>u[t]))).forEach((t=>{r["camel-case-expansion"]&&t.includes("-")&&delete E[t.split(".").map((t=>K(t))).join(".")],delete E[t]})),{aliases:Object.assign({},p.aliases),argv:Object.assign(y,E),configuration:r,defaulted:Object.assign({},f),error:F,newAliases:Object.assign({},h)}}}({cwd:process.cwd,env:()=>ot,format:d,normalize:u,resolve:s,require:t=>{if(void 0!==at)return at(t);if(t.match(/\.json$/))return JSON.parse(h(t,"utf8"));throw Error("only .json config files are supported in ESM")}}),lt=function(t,e){return Dt.parse(t.slice(),e).argv};function ct(){return process.versions.electron&&!process.defaultApp?0:1}lt.detailed=function(t,e){return Dt.parse(t.slice(),e)},lt.camelCase=K,lt.decamelize=Z,lt.looksLikeNumber=J;var ht={fs:{readFileSync:h,writeFile:f},format:d,resolve:s,exists:t=>{try{return l(t).isFile()}catch(t){return!1}}};let ft;class dt{constructor(t){t=t||{},this.directory=t.directory||"./locales",this.updateFiles="boolean"!=typeof t.updateFiles||t.updateFiles,this.locale=t.locale||"en",this.fallbackToLanguage="boolean"!=typeof t.fallbackToLanguage||t.fallbackToLanguage,this.cache=Object.create(null),this.writeQueue=[]}__(...t){if("string"!=typeof arguments[0])return this._taggedLiteral(arguments[0],...arguments);const e=t.shift();let n=function(){};return"function"==typeof t[t.length-1]&&(n=t.pop()),n=n||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]=e,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:n})):n(),ft.format.apply(ft.format,[this.cache[this.locale][e]||e].concat(t))}__n(){const t=Array.prototype.slice.call(arguments),e=t.shift(),n=t.shift(),s=t.shift();let i=function(){};"function"==typeof t[t.length-1]&&(i=t.pop()),this.cache[this.locale]||this._readLocaleFile();let u=1===s?e:n;if(this.cache[this.locale][e]){u=this.cache[this.locale][e][1===s?"one":"other"]}!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]={one:e,other:n},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:i})):i();const r=[u];return~u.indexOf("%d")&&r.push(s),ft.format.apply(ft.format,r.concat(t))}setLocale(t){this.locale=t}getLocale(){return this.locale}updateLocale(t){this.cache[this.locale]||this._readLocaleFile();for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(this.cache[this.locale][e]=t[e])}_taggedLiteral(t,...e){let n="";return t.forEach((function(t,s){const i=e[s+1];n+=t,void 0!==i&&(n+="%s")})),this.__.apply(this,[n].concat([].slice.call(e,1)))}_enqueueWrite(t){this.writeQueue.push(t),1===this.writeQueue.length&&this._processWriteQueue()}_processWriteQueue(){const t=this,e=this.writeQueue[0],n=e.directory,s=e.locale,i=e.cb,u=this._resolveLocaleFile(n,s),r=JSON.stringify(this.cache[s],null,2);ft.fs.writeFile(u,r,"utf-8",(function(e){t.writeQueue.shift(),t.writeQueue.length>0&&t._processWriteQueue(),i(e)}))}_readLocaleFile(){let t={};const e=this._resolveLocaleFile(this.directory,this.locale);try{ft.fs.readFileSync&&(t=JSON.parse(ft.fs.readFileSync(e,"utf-8")))}catch(n){if(n instanceof SyntaxError&&(n.message="syntax error in "+e),"ENOENT"!==n.code)throw n;t={}}this.cache[this.locale]=t}_resolveLocaleFile(t,e){let n=ft.resolve(t,"./",e+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(n)&&~e.lastIndexOf("_")){const s=ft.resolve(t,"./",e.split("_")[0]+".json");this._fileExistsSync(s)&&(n=s)}return n}_fileExistsSync(t){return ft.exists(t)}}var pt,gt;var mt=F(gt?pt:(gt=1,pt=function(t){if(void 0===t&&(t=2),t>=Error.stackTraceLimit)throw new TypeError("getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `"+t+"` and Error.stackTraceLimit was: `"+Error.stackTraceLimit+"`");var e=Error.prepareStackTrace;Error.prepareStackTrace=function(t,e){return e};var n=(new Error).stack;if(Error.prepareStackTrace=e,null!==n&&"object"==typeof n)return n[t]?n[t].getFileName():void 0}));const Ft=g(import.meta.url),Ct=Ft.substring(0,Ft.lastIndexOf("node_modules")),Et=m(import.meta.url);var yt,bt={assert:{notStrictEqual:n,strictEqual:e},cliui:function(t){return function(t,e){return _=e,new j({width:(null==t?void 0:t.width)||("object"==typeof process&&process.stdout&&process.stdout.columns?process.stdout.columns:80),wrap:null==t?void 0:t.wrap})}(t,{stringWidth:I,stripAnsi:M,wrap:Y})},findUp:function(t,e){let n,u=s(".",t);for(l(u).isDirectory()||(u=i(u));;){if(n=e(u,c(u)),n)return s(u,n);if(u=i(n=u),n===u)break}},getEnv:t=>process.env[t],inspect:p,getProcessArgvBin:function(){return process.argv[ct()]},mainFilename:Ct||process.cwd(),Parser:lt,path:{basename:D,dirname:i,extname:a,relative:o,resolve:s,join:r},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(t,e)=>process.emitWarning(t,e),execPath:()=>process.execPath,exit:t=>{process.exit(t)},nextTick:process.nextTick,stdColumns:void 0!==process.stdout.columns?process.stdout.columns:null},readFileSync:h,readdirSync:c,require:Et,getCallerFile:()=>{const t=mt(3);return t.match(/^file:\/\//)?g(t):t},stringWidth:I,y18n:(yt={directory:s(Ft,"../../../locales"),updateFiles:!1},function(t,e){ft=e;const n=new dt(t);return{__:n.__.bind(n),__n:n.__n.bind(n),setLocale:n.setLocale.bind(n),getLocale:n.getLocale.bind(n),updateLocale:n.updateLocale.bind(n),locale:n.locale}}(yt,ht))};function vt(t,e,n,s){n.assert.notStrictEqual(t,e,s)}function At(t,e){e.assert.strictEqual(typeof t,"string")}function Bt(t){return Object.keys(t)}function wt(t){return!!t&&!!t.then&&"function"==typeof t.then}class Ot extends Error{constructor(t){super(t||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,Ot)}}function jt(t){const e=t.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),n=/\.*[\][<>]/g,s=e.shift();if(!s)throw new Error(`No command found in: ${t}`);const i={cmd:s.replace(n,""),demanded:[],optional:[]};return e.forEach(((t,s)=>{let u=!1;t=t.replace(/\s/g,""),/\.+[\]>]/.test(t)&&s===e.length-1&&(u=!0),/^\[/.test(t)?i.optional.push({cmd:t.replace(n,"").split("|"),variadic:u}):i.demanded.push({cmd:t.replace(n,"").split("|"),variadic:u})})),i}const xt=["first","second","third","fourth","fifth","sixth"];function _t(t,e,n){try{let s=0;const[i,u,r]="object"==typeof t?[{demanded:[],optional:[]},t,e]:[jt(`cmd ${t}`),e,n],o=[].slice.call(u);for(;o.length&&void 0===o[o.length-1];)o.pop();const a=r||o.length;if(a<i.demanded.length)throw new Ot(`Not enough arguments provided. Expected ${i.demanded.length} but received ${o.length}.`);const D=i.demanded.length+i.optional.length;if(a>D)throw new Ot(`Too many arguments provided. Expected max ${D} but received ${a}.`);i.demanded.forEach((t=>{const e=kt(o.shift());0===t.cmd.filter((t=>t===e||"*"===t)).length&&Mt(e,t.cmd,s),s+=1})),i.optional.forEach((t=>{if(0===o.length)return;const e=kt(o.shift());0===t.cmd.filter((t=>t===e||"*"===t)).length&&Mt(e,t.cmd,s),s+=1}))}catch(t){console.warn(t.stack)}}function kt(t){return Array.isArray(t)?"array":null===t?"null":typeof t}function Mt(t,e,n){throw new Ot(`Invalid ${xt[n]||"manyith"} argument. Expected ${e.join(" or ")} but received ${t}.`)}class St{constructor(t){this.globalMiddleware=[],this.frozens=[],this.yargs=t}addMiddleware(t,e,n=!0,s=!1){if(_t("<array|function> [boolean] [boolean] [boolean]",[t,e,n],arguments.length),Array.isArray(t)){for(let s=0;s<t.length;s++){if("function"!=typeof t[s])throw Error("middleware must be a function");const i=t[s];i.applyBeforeValidation=e,i.global=n}Array.prototype.push.apply(this.globalMiddleware,t)}else if("function"==typeof t){const i=t;i.applyBeforeValidation=e,i.global=n,i.mutates=s,this.globalMiddleware.push(t)}return this.yargs}addCoerceMiddleware(t,e){const n=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter((t=>{const s=[...n[e]||[],e];return!t.option||!s.includes(t.option)})),t.option=e,this.addMiddleware(t,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){const t=this.frozens.pop();void 0!==t&&(this.globalMiddleware=t)}reset(){this.globalMiddleware=this.globalMiddleware.filter((t=>t.global))}}function $t(t,e,n,s){return n.reduce(((t,n)=>{if(n.applyBeforeValidation!==s)return t;if(n.mutates){if(n.applied)return t;n.applied=!0}if(wt(t))return t.then((t=>Promise.all([t,n(t,e)]))).then((([t,e])=>Object.assign(t,e)));{const s=n(t,e);return wt(s)?s.then((e=>Object.assign(t,e))):Object.assign(t,s)}}),t)}function Pt(t,e,n=t=>{throw t}){try{const n="function"==typeof t?t():t;return wt(n)?n.then((t=>e(t))):e(n)}catch(t){return n(t)}}const It=/(^\*)|(^\$0)/;class Nt{constructor(t,e,n,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=t,this.globalMiddleware=n,this.validation=e}addDirectory(t,e,n,s){s=s||{},this.requireCache.add(n);const i=this.shim.path.resolve(this.shim.path.dirname(n),t),u=this.shim.readdirSync(i,{recursive:!!s.recurse});Array.isArray(s.extensions)||(s.extensions=["js"]);const r="function"==typeof s.visit?s.visit:t=>t;for(const t of u){const n=t.toString();if(s.exclude){let t=!1;if(t="function"==typeof s.exclude?s.exclude(n):s.exclude.test(n),t)continue}if(s.include){let t=!1;if(t="function"==typeof s.include?s.include(n):s.include.test(n),!t)continue}let u=!1;for(const t of s.extensions)n.endsWith(t)&&(u=!0);if(u){const t=this.shim.path.join(i,n),s=e(t),u=Object.create(null,Object.getOwnPropertyDescriptors({...s}));if(r(u,t,n)){if(this.requireCache.has(t))continue;this.requireCache.add(t),u.command||(u.command=this.shim.path.basename(t,this.shim.path.extname(t))),this.addHandler(u)}}}}addHandler(t,e,n,s,i,u){let r=[];const o=function(t){return t?t.map((t=>(t.applyBeforeValidation=!1,t))):[]}(i);if(s=s||(()=>{}),Array.isArray(t))if(function(t){return t.every((t=>"string"==typeof t))}(t))[t,...r]=t;else for(const e of t)this.addHandler(e);else{if(function(t){return"object"==typeof t&&!Array.isArray(t)}(t)){let e=Array.isArray(t.command)||"string"==typeof t.command?t.command:null;if(null===e)throw new Error(`No command name given for module: ${this.shim.inspect(t)}`);return t.aliases&&(e=[].concat(e).concat(t.aliases)),void this.addHandler(e,this.extractDesc(t),t.builder,t.handler,t.middlewares,t.deprecated)}if(Wt(n))return void this.addHandler([t].concat(r),e,n.builder,n.handler,n.middlewares,n.deprecated)}if("string"==typeof t){const i=jt(t);r=r.map((t=>jt(t).cmd));let a=!1;const D=[i.cmd].concat(r).filter((t=>!It.test(t)||(a=!0,!1)));0===D.length&&a&&D.push("$0"),a&&(i.cmd=D[0],r=D.slice(1),t=t.replace(It,i.cmd)),r.forEach((t=>{this.aliasMap[t]=i.cmd})),!1!==e&&this.usage.command(t,e,a,r,u),this.handlers[i.cmd]={original:t,description:e,handler:s,builder:n||{},middlewares:o,deprecated:u,demanded:i.demanded,optional:i.optional},a&&(this.defaultCommand=this.handlers[i.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(t,e,n,s,i,u){const r=this.handlers[t]||this.handlers[this.aliasMap[t]]||this.defaultCommand,o=e.getInternalMethods().getContext(),a=o.commands.slice(),D=!t;t&&(o.commands.push(t),o.fullCommands.push(r.original));const l=this.applyBuilderUpdateUsageAndParse(D,r,e,n.aliases,a,s,i,u);return wt(l)?l.then((t=>this.applyMiddlewareAndGetResult(D,r,t.innerArgv,o,i,t.aliases,e))):this.applyMiddlewareAndGetResult(D,r,l.innerArgv,o,i,l.aliases,e)}applyBuilderUpdateUsageAndParse(t,e,n,s,i,u,r,o){const a=e.builder;let D=n;if(Lt(a)){n.getInternalMethods().getUsageInstance().freeze();const l=a(n.getInternalMethods().reset(s),o);if(wt(l))return l.then((s=>{var o;return D=(o=s)&&"function"==typeof o.getInternalMethods?s:n,this.parseAndUpdateUsage(t,e,D,i,u,r)}))}else(function(t){return"object"==typeof t})(a)&&(n.getInternalMethods().getUsageInstance().freeze(),D=n.getInternalMethods().reset(s),Object.keys(e.builder).forEach((t=>{D.option(t,a[t])})));return this.parseAndUpdateUsage(t,e,D,i,u,r)}parseAndUpdateUsage(t,e,n,s,i,u){t&&n.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(n)&&n.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,e),e.description);const r=n.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,i,u);return wt(r)?r.then((t=>({aliases:n.parsed.aliases,innerArgv:t}))):{aliases:n.parsed.aliases,innerArgv:r}}shouldUpdateUsage(t){return!t.getInternalMethods().getUsageInstance().getUsageDisabled()&&0===t.getInternalMethods().getUsageInstance().getUsage().length}usageFromParentCommandsCommandHandler(t,e){const n=It.test(e.original)?e.original.replace(It,"").trim():e.original,s=t.filter((t=>!It.test(t)));return s.push(n),`$0 ${s.join(" ")}`}handleValidationAndGetResult(t,e,n,s,i,u,r,o){if(!u.getInternalMethods().getHasOutput()){const e=u.getInternalMethods().runValidation(i,o,u.parsed.error,t);n=Pt(n,(t=>(e(t),t)))}if(e.handler&&!u.getInternalMethods().getHasOutput()){u.getInternalMethods().setHasOutput();const s=!!u.getOptions().configuration["populate--"];u.getInternalMethods().postProcess(n,s,!1,!1),n=Pt(n=$t(n,u,r,!1),(t=>{const n=e.handler(t);return wt(n)?n.then((()=>t)):t})),t||u.getInternalMethods().getUsageInstance().cacheHelpMessage(),wt(n)&&!u.getInternalMethods().hasParseCallback()&&n.catch((t=>{try{u.getInternalMethods().getUsageInstance().fail(null,t)}catch(t){}}))}return t||(s.commands.pop(),s.fullCommands.pop()),n}applyMiddlewareAndGetResult(t,e,n,s,i,u,r){let o={};if(i)return n;r.getInternalMethods().getHasOutput()||(o=this.populatePositionals(e,n,s,r));const a=this.globalMiddleware.getMiddleware().slice(0).concat(e.middlewares),D=$t(n,r,a,!0);return wt(D)?D.then((n=>this.handleValidationAndGetResult(t,e,n,s,u,r,a,o))):this.handleValidationAndGetResult(t,e,D,s,u,r,a,o)}populatePositionals(t,e,n,s){e._=e._.slice(n.commands.length);const i=t.demanded.slice(0),u=t.optional.slice(0),r={};for(this.validation.positionalCount(i.length,e._.length);i.length;){const t=i.shift();this.populatePositional(t,e,r)}for(;u.length;){const t=u.shift();this.populatePositional(t,e,r)}return e._=n.commands.concat(e._.map((t=>""+t))),this.postProcessPositionals(e,r,this.cmdToParseOptions(t.original),s),r}populatePositional(t,e,n){const s=t.cmd[0];t.variadic?n[s]=e._.splice(0).map(String):e._.length&&(n[s]=[String(e._.shift())])}cmdToParseOptions(t){const e={array:[],default:{},alias:{},demand:{}},n=jt(t);return n.demanded.forEach((t=>{const[n,...s]=t.cmd;t.variadic&&(e.array.push(n),e.default[n]=[]),e.alias[n]=s,e.demand[n]=!0})),n.optional.forEach((t=>{const[n,...s]=t.cmd;t.variadic&&(e.array.push(n),e.default[n]=[]),e.alias[n]=s})),e}postProcessPositionals(t,e,n,s){const i=Object.assign({},s.getOptions());i.default=Object.assign(n.default,i.default);for(const t of Object.keys(n.alias))i.alias[t]=(i.alias[t]||[]).concat(n.alias[t]);i.array=i.array.concat(n.array),i.config={};const u=[];if(Object.keys(e).forEach((t=>{e[t].map((e=>{i.configuration["unknown-options-as-args"]&&(i.key[t]=!0),u.push(`--${t}`),u.push(e)}))})),!u.length)return;const r=Object.assign({},i.configuration,{"populate--":!1}),o=this.shim.Parser.detailed(u,Object.assign({},i,{configuration:r}));if(o.error)s.getInternalMethods().getUsageInstance().fail(o.error.message,o.error);else{const n=Object.keys(e);Object.keys(e).forEach((t=>{n.push(...o.aliases[t])})),Object.keys(o.argv).forEach((i=>{n.includes(i)&&(e[i]||(e[i]=o.argv[i]),!this.isInConfigs(s,i)&&!this.isDefaulted(s,i)&&Object.prototype.hasOwnProperty.call(t,i)&&Object.prototype.hasOwnProperty.call(o.argv,i)&&(Array.isArray(t[i])||Array.isArray(o.argv[i]))?t[i]=[].concat(t[i],o.argv[i]):t[i]=o.argv[i])}))}}isDefaulted(t,e){const{default:n}=t.getOptions();return Object.prototype.hasOwnProperty.call(n,e)||Object.prototype.hasOwnProperty.call(n,this.shim.Parser.camelCase(e))}isInConfigs(t,e){const{configObjects:n}=t.getOptions();return n.some((t=>Object.prototype.hasOwnProperty.call(t,e)))||n.some((t=>Object.prototype.hasOwnProperty.call(t,this.shim.Parser.camelCase(e))))}runDefaultBuilderOn(t){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(t)){const e=It.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");t.getInternalMethods().getUsageInstance().usage(e,this.defaultCommand.description)}const e=this.defaultCommand.builder;if(Lt(e))return e(t,!0);Wt(e)||Object.keys(e).forEach((n=>{t.option(n,e[n])}))}extractDesc({describe:t,description:e,desc:n}){for(const s of[t,e,n]){if("string"==typeof s||!1===s)return s;vt(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){const t=this.frozens.pop();vt(t,void 0,this.shim),({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=t)}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}}function Wt(t){return"object"==typeof t&&!!t.builder&&"function"==typeof t.handler}function Lt(t){return"function"==typeof t}function zt(t={},e=()=>!0){const n={};return Bt(t).forEach((s=>{e(s,t[s])&&(n[s]=t[s])})),n}function Ht(t){"undefined"!=typeof process&&[process.stdout,process.stderr].forEach((e=>{const n=e;n._handle&&n.isTTY&&"function"==typeof n._handle.setBlocking&&n._handle.setBlocking(t)}))}function Tt(t){return"boolean"==typeof t}function Ut(t,e){const n=e.y18n.__,s={},i=[];s.failFn=function(t){i.push(t)};let u=null,r=null,o=!0;s.showHelpOnFail=function(e=!0,n){const[i,a]="string"==typeof e?[!0,e]:[e,n];return t.getInternalMethods().isGlobalContext()&&(r=a),u=a,o=i,s};let a=!1;s.fail=function(e,n){const D=t.getInternalMethods().getLoggerInstance();if(!i.length){if(t.getExitProcess()&&Ht(!0),!a){a=!0,o&&(t.showHelp("error"),D.error()),(e||n)&&D.error(e||n);const s=u||r;s&&((e||n)&&D.error(""),D.error(s))}if(n=n||new Ot(e),t.getExitProcess())return t.exit(1);if(t.getInternalMethods().hasParseCallback())return t.exit(1,n);throw n}for(let t=i.length-1;t>=0;--t){const u=i[t];if(Tt(u)){if(n)throw n;if(e)throw Error(e)}else u(e,n,s)}};let D=[],l=!1;s.usage=(t,e)=>null===t?(l=!0,D=[],s):(l=!1,D.push([t,e||""]),s),s.getUsage=()=>D,s.getUsageDisabled=()=>l,s.getPositionalGroupName=()=>n("Positionals:");let c=[];s.example=(t,e)=>{c.push([t,e||""])};let h=[];s.command=function(t,e,n,s,i=!1){n&&(h=h.map((t=>(t[2]=!1,t)))),h.push([t,e||"",n,s,i])},s.getCommands=()=>h;let f={};s.describe=function(t,e){Array.isArray(t)?t.forEach((t=>{s.describe(t,e)})):"object"==typeof t?Object.keys(t).forEach((e=>{s.describe(e,t[e])})):f[t]=e},s.getDescriptions=()=>f;let d=[];s.epilog=t=>{d.push(t)};let p,g=!1;s.wrap=t=>{g=!0,p=t},s.getWrap=()=>e.getEnv("YARGS_DISABLE_WRAP")?null:(g||(p=function(){const t=80;return e.process.stdColumns?Math.min(t,e.process.stdColumns):t}(),g=!0),p);const m="__yargsString__:";function F(t,n,s){let i=0;return Array.isArray(t)||(t=Object.values(t).map((t=>[t]))),t.forEach((t=>{i=Math.max(e.stringWidth(s?`${s} ${Gt(t[0])}`:Gt(t[0]))+qt(t[0]),i)})),n&&(i=Math.min(i,parseInt((.5*n).toString(),10))),i}let C;function E(e){return t.getOptions().hiddenOptions.indexOf(e)<0||t.parsed.argv[t.getOptions().showHiddenOpt]}function y(t,e){let s=`[${n("default:")} `;if(void 0===t&&!e)return null;if(e)s+=e;else switch(typeof t){case"string":s+=`"${t}"`;break;case"object":s+=JSON.stringify(t);break;default:s+=t}return`${s}]`}s.deferY18nLookup=t=>m+t,s.help=function(){if(C)return C;!function(){const e=t.getDemandedOptions(),n=t.getOptions();(Object.keys(n.alias)||[]).forEach((i=>{n.alias[i].forEach((u=>{f[u]&&s.describe(i,f[u]),u in e&&t.demandOption(i,e[u]),n.boolean.includes(u)&&t.boolean(i),n.count.includes(u)&&t.count(i),n.string.includes(u)&&t.string(i),n.normalize.includes(u)&&t.normalize(i),n.array.includes(u)&&t.array(i),n.number.includes(u)&&t.number(i)}))}))}();const i=t.customScriptName?t.$0:e.path.basename(t.$0),u=t.getDemandedOptions(),r=t.getDemandedCommands(),o=t.getDeprecatedOptions(),a=t.getGroups(),p=t.getOptions();let g=[];g=g.concat(Object.keys(f)),g=g.concat(Object.keys(u)),g=g.concat(Object.keys(r)),g=g.concat(Object.keys(p.default)),g=g.filter(E),g=Object.keys(g.reduce(((t,e)=>("_"!==e&&(t[e]=!0),t)),{}));const b=s.getWrap(),v=e.cliui({width:b,wrap:!!b});if(!l)if(D.length)D.forEach((t=>{v.div({text:`${t[0].replace(/\$0/g,i)}`}),t[1]&&v.div({text:`${t[1]}`,padding:[1,0,0,0]})})),v.div();else if(h.length){let t=null;t=r._?`${i} <${n("command")}>\n`:`${i} [${n("command")}]\n`,v.div(`${t}`)}if(h.length>1||1===h.length&&!h[0][2]){v.div(n("Commands:"));const e=t.getInternalMethods().getContext(),s=e.commands.length?`${e.commands.join(" ")} `:"";!0===t.getInternalMethods().getParserConfiguration()["sort-commands"]&&(h=h.sort(((t,e)=>t[0].localeCompare(e[0]))));const u=i?`${i} `:"";h.forEach((t=>{const e=`${u}${s}${t[0].replace(/^\$0 ?/,"")}`;v.span({text:e,padding:[0,2,0,2],width:F(h,b,`${i}${s}`)+4},{text:t[1]});const r=[];t[2]&&r.push(`[${n("default")}]`),t[3]&&t[3].length&&r.push(`[${n("aliases:")} ${t[3].join(", ")}]`),t[4]&&("string"==typeof t[4]?r.push(`[${n("deprecated: %s",t[4])}]`):r.push(`[${n("deprecated")}]`)),r.length?v.div({text:r.join(" "),padding:[0,0,0,2],align:"right"}):v.div()})),v.div()}const A=(Object.keys(p.alias)||[]).concat(Object.keys(t.parsed.newAliases)||[]);g=g.filter((e=>!t.parsed.newAliases[e]&&A.every((t=>-1===(p.alias[t]||[]).indexOf(e)))));const B=n("Options:");a[B]||(a[B]=[]),function(t,e,n,s){let i=[],u=null;Object.keys(n).forEach((t=>{i=i.concat(n[t])})),t.forEach((t=>{u=[t].concat(e[t]),u.some((t=>-1!==i.indexOf(t)))||n[s].push(t)}))}(g,p.alias,a,B);const w=t=>/^--/.test(Gt(t)),O=Object.keys(a).filter((t=>a[t].length>0)).map((t=>({groupName:t,normalizedKeys:a[t].filter(E).map((t=>{if(A.includes(t))return t;for(let e,n=0;void 0!==(e=A[n]);n++)if((p.alias[e]||[]).includes(t))return e;return t}))}))).filter((({normalizedKeys:t})=>t.length>0)).map((({groupName:t,normalizedKeys:e})=>{const n=e.reduce(((e,n)=>(e[n]=[n].concat(p.alias[n]||[]).map((e=>t===s.getPositionalGroupName()?e:(/^[0-9]$/.test(e)?p.boolean.includes(n)?"-":"--":e.length>1?"--":"-")+e)).sort(((t,e)=>w(t)===w(e)?0:w(t)?1:-1)).join(", "),e)),{});return{groupName:t,normalizedKeys:e,switches:n}}));if(O.filter((({groupName:t})=>t!==s.getPositionalGroupName())).some((({normalizedKeys:t,switches:e})=>!t.every((t=>w(e[t])))))&&O.filter((({groupName:t})=>t!==s.getPositionalGroupName())).forEach((({normalizedKeys:t,switches:e})=>{t.forEach((t=>{var n,s;w(e[t])&&(e[t]=(n=e[t],s=4,Rt(n)?{text:n.text,indentation:n.indentation+s}:{text:n,indentation:s}))}))})),O.forEach((({groupName:e,normalizedKeys:i,switches:r})=>{v.div(e),i.forEach((e=>{const i=r[e];let a=f[e]||"",D=null;a.includes(m)&&(a=n(a.substring(16))),p.boolean.includes(e)&&(D=`[${n("boolean")}]`),p.count.includes(e)&&(D=`[${n("count")}]`),p.string.includes(e)&&(D=`[${n("string")}]`),p.normalize.includes(e)&&(D=`[${n("string")}]`),p.array.includes(e)&&(D=`[${n("array")}]`),p.number.includes(e)&&(D=`[${n("number")}]`);const l=[e in o?(c=o[e],"string"==typeof c?`[${n("deprecated: %s",c)}]`:`[${n("deprecated")}]`):null,D,e in u?`[${n("required")}]`:null,p.choices&&p.choices[e]?`[${n("choices:")} ${s.stringifiedValues(p.choices[e])}]`:null,y(p.default[e],p.defaultDescription[e])].filter(Boolean).join(" ");var c;v.span({text:Gt(i),padding:[0,2,0,2+qt(i)],width:F(r,b)+4},a);const h=!0===t.getInternalMethods().getUsageConfiguration()["hide-types"];l&&!h?v.div({text:l,padding:[0,0,0,2],align:"right"}):v.div()})),v.div()})),c.length&&(v.div(n("Examples:")),c.forEach((t=>{t[0]=t[0].replace(/\$0/g,i)})),c.forEach((t=>{""===t[1]?v.div({text:t[0],padding:[0,2,0,2]}):v.div({text:t[0],padding:[0,2,0,2],width:F(c,b)+4},{text:t[1]})})),v.div()),d.length>0){const t=d.map((t=>t.replace(/\$0/g,i))).join("\n");v.div(`${t}\n`)}return v.toString().replace(/\s*$/,"")},s.cacheHelpMessage=function(){C=this.help()},s.clearCachedHelpMessage=function(){C=void 0},s.hasCachedHelpMessage=function(){return!!C},s.showHelp=e=>{const n=t.getInternalMethods().getLoggerInstance();e||(e="error");("function"==typeof e?e:n[e])(s.help())},s.functionDescription=t=>["(",t.name?e.Parser.decamelize(t.name,"-"):n("generated-value"),")"].join(""),s.stringifiedValues=function(t,e){let n="";const s=e||", ",i=[].concat(t);return t&&i.length?(i.forEach((t=>{n.length&&(n+=s),n+=JSON.stringify(t)})),n):n};let b=null;s.version=t=>{b=t},s.showVersion=e=>{const n=t.getInternalMethods().getLoggerInstance();e||(e="error");("function"==typeof e?e:n[e])(b)},s.reset=function(t){return u=null,a=!1,D=[],l=!1,d=[],c=[],h=[],f=zt(f,(e=>!t[e])),s};const v=[];return s.freeze=function(){v.push({failMessage:u,failureOutput:a,usages:D,usageDisabled:l,epilogs:d,examples:c,commands:h,descriptions:f})},s.unfreeze=function(t=!1){const e=v.pop();e&&(t?(f={...e.descriptions,...f},h=[...e.commands,...h],D=[...e.usages,...D],c=[...e.examples,...c],d=[...e.epilogs,...d]):({failMessage:u,failureOutput:a,usages:D,usageDisabled:l,epilogs:d,examples:c,commands:h,descriptions:f}=e))},s}function Rt(t){return"object"==typeof t}function qt(t){return Rt(t)?t.indentation:0}function Gt(t){return Rt(t)?t.text:t}class Vt{constructor(t,e,n,s){var i,u,r;this.yargs=t,this.usage=e,this.command=n,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=null!==(r=(null===(i=this.shim.getEnv("SHELL"))||void 0===i?void 0:i.includes("zsh"))||(null===(u=this.shim.getEnv("ZSH_NAME"))||void 0===u?void 0:u.includes("zsh")))&&void 0!==r&&r}defaultCompletion(t,e,n,s){const i=this.command.getCommandHandlers();for(let e=0,n=t.length;e<n;++e)if(i[t[e]]&&i[t[e]].builder){const n=i[t[e]].builder;if(Lt(n)){this.indexAfterLastReset=e+1;const t=this.yargs.getInternalMethods().reset();return n(t,!0),t.argv}}const u=[];this.commandCompletions(u,t,n),this.optionCompletions(u,t,e,n),this.choicesFromOptionsCompletions(u,t,e,n),this.choicesFromPositionalsCompletions(u,t,e,n),s(null,u)}commandCompletions(t,e,n){const s=this.yargs.getInternalMethods().getContext().commands;n.match(/^-/)||s[s.length-1]===n||this.previousArgHasChoices(e)||this.usage.getCommands().forEach((n=>{const s=jt(n[0]).cmd;if(-1===e.indexOf(s))if(this.zshShell){const e=n[1]||"";t.push(s.replace(/:/g,"\\:")+":"+e)}else t.push(s)}))}optionCompletions(t,e,n,s){if((s.match(/^-/)||""===s&&0===t.length)&&!this.previousArgHasChoices(e)){const n=this.yargs.getOptions(),i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(n.key).forEach((u=>{const r=!!n.configuration["boolean-negation"]&&n.boolean.includes(u);i.includes(u)||n.hiddenOptions.includes(u)||this.argsContainKey(e,u,r)||this.completeOptionKey(u,t,s,r&&!!n.default[u])}))}}choicesFromOptionsCompletions(t,e,n,s){if(this.previousArgHasChoices(e)){const n=this.getPreviousArgChoices(e);n&&n.length>0&&t.push(...n.map((t=>t.replace(/:/g,"\\:"))))}}choicesFromPositionalsCompletions(t,e,n,s){if(""===s&&t.length>0&&this.previousArgHasChoices(e))return;const i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],u=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),r=i[n._.length-u-1];if(!r)return;const o=this.yargs.getOptions().choices[r]||[];for(const e of o)e.startsWith(s)&&t.push(e.replace(/:/g,"\\:"))}getPreviousArgChoices(t){if(t.length<1)return;let e=t[t.length-1],n="";if(!e.startsWith("-")&&t.length>1&&(n=e,e=t[t.length-2]),!e.startsWith("-"))return;const s=e.replace(/^-+/,""),i=this.yargs.getOptions(),u=[s,...this.yargs.getAliases()[s]||[]];let r;for(const t of u)if(Object.prototype.hasOwnProperty.call(i.key,t)&&Array.isArray(i.choices[t])){r=i.choices[t];break}return r?r.filter((t=>!n||t.startsWith(n))):void 0}previousArgHasChoices(t){const e=this.getPreviousArgChoices(t);return void 0!==e&&e.length>0}argsContainKey(t,e,n){const s=e=>-1!==t.indexOf((/^[^0-9]$/.test(e)?"-":"--")+e);if(s(e))return!0;if(n&&s(`no-${e}`))return!0;if(this.aliases)for(const t of this.aliases[e])if(s(t))return!0;return!1}completeOptionKey(t,e,n,s){var i,u,r,o;let a=t;if(this.zshShell){const e=this.usage.getDescriptions(),n=null===(u=null===(i=null==this?void 0:this.aliases)||void 0===i?void 0:i[t])||void 0===u?void 0:u.find((t=>{const n=e[t];return"string"==typeof n&&n.length>0})),s=n?e[n]:void 0,D=null!==(o=null!==(r=e[t])&&void 0!==r?r:s)&&void 0!==o?o:"";a=`${t.replace(/:/g,"\\:")}:${D.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}const D=!/^--/.test(n)&&(t=>/^[^0-9]$/.test(t))(t)?"-":"--";e.push(D+a),s&&e.push(D+"no-"+a)}customCompletion(t,e,n,s){if(vt(this.customCompletionFunction,null,this.shim),this.customCompletionFunction.length<3){const t=this.customCompletionFunction(n,e);return wt(t)?t.then((t=>{this.shim.process.nextTick((()=>{s(null,t)}))})).catch((t=>{this.shim.process.nextTick((()=>{s(t,void 0)}))})):s(null,t)}return function(t){return t.length>3}(this.customCompletionFunction)?this.customCompletionFunction(n,e,((i=s)=>this.defaultCompletion(t,e,n,i)),(t=>{s(null,t)})):this.customCompletionFunction(n,e,(t=>{s(null,t)}))}getCompletion(t,e){const n=t.length?t[t.length-1]:"",s=this.yargs.parse(t,!0),i=this.customCompletionFunction?s=>this.customCompletion(t,s,n,e):s=>this.defaultCompletion(t,s,n,e);return wt(s)?s.then(i):i(s)}generateCompletionScript(t,e){let n=this.zshShell?'#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$\'\n\' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "${words[@]}"))\n  IFS=$si\n  if [[ ${#reply} -gt 0 ]]; then\n    _describe \'values\' reply\n  else\n    _default\n  fi\n}\nif [[ "\'${zsh_eval_context[-1]}" == "loadautofunc" ]]; then\n  _{{app_name}}_yargs_completions "$@"\nelse\n  compdef _{{app_name}}_yargs_completions {{app_name}}\nfi\n###-end-{{app_name}}-completions-###\n':'###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    # see https://stackoverflow.com/a/40944195/7080036 for the spaces-handling awk\n    mapfile -t type_list < <({{app_path}} --get-yargs-completions "${args[@]}")\n    mapfile -t COMPREPLY < <(compgen -W "$( printf \'%q \' "${type_list[@]}" )" -- "${cur_word}" |\n        awk \'/ / { print "\\""$0"\\"" } /^[^ ]+$/ { print $0 }\')\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';const s=this.shim.path.basename(t);return t.match(/\.js$/)&&(t=`./${t}`),n=n.replace(/{{app_name}}/g,s),n=n.replace(/{{completion_command}}/g,e),n.replace(/{{app_path}}/g,t)}registerFunction(t){this.customCompletionFunction=t}setParsed(t){this.aliases=t.aliases}}function Yt(t,e){if(0===t.length)return e.length;if(0===e.length)return t.length;const n=[];let s,i;for(s=0;s<=e.length;s++)n[s]=[s];for(i=0;i<=t.length;i++)n[0][i]=i;for(s=1;s<=e.length;s++)for(i=1;i<=t.length;i++)e.charAt(s-1)===t.charAt(i-1)?n[s][i]=n[s-1][i-1]:s>1&&i>1&&e.charAt(s-2)===t.charAt(i-1)&&e.charAt(s-1)===t.charAt(i-2)?n[s][i]=n[s-2][i-2]+1:n[s][i]=Math.min(n[s-1][i-1]+1,Math.min(n[s][i-1]+1,n[s-1][i]+1));return n[e.length][t.length]}const Kt=["$0","--","_"];let Zt,Jt=[];function Qt(t,e,n,s){Zt=s;let i={};if(Object.prototype.hasOwnProperty.call(t,"extends")){if("string"!=typeof t.extends)return i;const u=/\.json|\..*rc$/.test(t.extends);let r=null;if(u)r=function(t,e){return Zt.path.resolve(t,e)}(e,t.extends);else try{r=import.meta.resolve(t.extends)}catch(e){return t}!function(t){if(Jt.indexOf(t)>-1)throw new Ot(`Circular extended configurations: '${t}'.`)}(r),Jt.push(r),i=u?JSON.parse(Zt.readFileSync(r,"utf8")):s.require(t.extends),delete t.extends,i=Qt(i,Zt.path.dirname(r),n,Zt)}return Jt=[],n?Xt(i,t):Object.assign({},i,t)}function Xt(t,e){const n={};function s(t){return t&&"object"==typeof t&&!Array.isArray(t)}Object.assign(n,t);for(const i of Object.keys(e))s(e[i])&&s(n[i])?n[i]=Xt(t[i],e[i]):n[i]=e[i];return n}var te,ee,ne,se,ie,ue,re,oe,ae,De,le,ce,he,fe,de,pe,ge,me,Fe,Ce,Ee,ye,be,ve,Ae,Be,we,Oe,je,xe,_e,ke,Me,Se,$e,Pe=function(t,e,n,s,i){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?i.call(t,n):i?i.value=n:e.set(t,n),n},Ie=function(t,e,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(t):s?s.value:e.get(t)};const Ne=Symbol("copyDoubleDash"),We=Symbol("copyDoubleDash"),Le=Symbol("deleteFromParserHintObject"),ze=Symbol("emitWarning"),He=Symbol("freeze"),Te=Symbol("getDollarZero"),Ue=Symbol("getParserConfiguration"),Re=Symbol("getUsageConfiguration"),qe=Symbol("guessLocale"),Ge=Symbol("guessVersion"),Ve=Symbol("parsePositionalNumbers"),Ye=Symbol("pkgUp"),Ke=Symbol("populateParserHintArray"),Ze=Symbol("populateParserHintSingleValueDictionary"),Je=Symbol("populateParserHintArrayDictionary"),Qe=Symbol("populateParserHintDictionary"),Xe=Symbol("sanitizeKey"),tn=Symbol("setKey"),en=Symbol("unfreeze"),nn=Symbol("validateAsync"),sn=Symbol("getCommandInstance"),un=Symbol("getContext"),rn=Symbol("getHasOutput"),on=Symbol("getLoggerInstance"),an=Symbol("getParseContext"),Dn=Symbol("getUsageInstance"),ln=Symbol("getValidationInstance"),cn=Symbol("hasParseCallback"),hn=Symbol("isGlobalContext"),fn=Symbol("postProcess"),dn=Symbol("rebase"),pn=Symbol("reset"),gn=Symbol("runYargsParserAndExecuteCommands"),mn=Symbol("runValidation"),Fn=Symbol("setHasOutput"),Cn=Symbol("kTrackManuallySetKeys");class En{constructor(t=[],e,n,s){this.customScriptName=!1,this.parsed=!1,te.set(this,void 0),ee.set(this,void 0),ne.set(this,{commands:[],fullCommands:[]}),se.set(this,null),ie.set(this,null),ue.set(this,"show-hidden"),re.set(this,null),oe.set(this,!0),ae.set(this,{}),De.set(this,!0),le.set(this,[]),ce.set(this,void 0),he.set(this,{}),fe.set(this,!1),de.set(this,null),pe.set(this,!0),ge.set(this,void 0),me.set(this,""),Fe.set(this,void 0),Ce.set(this,void 0),Ee.set(this,{}),ye.set(this,null),be.set(this,null),ve.set(this,{}),Ae.set(this,{}),Be.set(this,void 0),we.set(this,!1),Oe.set(this,void 0),je.set(this,!1),xe.set(this,!1),_e.set(this,!1),ke.set(this,void 0),Me.set(this,{}),Se.set(this,null),$e.set(this,void 0),Pe(this,Oe,s,"f"),Pe(this,Be,t,"f"),Pe(this,ee,e,"f"),Pe(this,Ce,n,"f"),Pe(this,ce,new St(this),"f"),this.$0=this[Te](),this[pn](),Pe(this,te,Ie(this,te,"f"),"f"),Pe(this,ke,Ie(this,ke,"f"),"f"),Pe(this,$e,Ie(this,$e,"f"),"f"),Pe(this,Fe,Ie(this,Fe,"f"),"f"),Ie(this,Fe,"f").showHiddenOpt=Ie(this,ue,"f"),Pe(this,ge,this[We](),"f"),Ie(this,Oe,"f").y18n.setLocale("en_US")}addHelpOpt(t,e){return _t("[string|boolean] [string]",[t,e],arguments.length),Ie(this,de,"f")&&(this[Le](Ie(this,de,"f")),Pe(this,de,null,"f")),!1===t&&void 0===e||(Pe(this,de,"string"==typeof t?t:"help","f"),this.boolean(Ie(this,de,"f")),this.describe(Ie(this,de,"f"),e||Ie(this,ke,"f").deferY18nLookup("Show help"))),this}help(t,e){return this.addHelpOpt(t,e)}addShowHiddenOpt(t,e){if(_t("[string|boolean] [string]",[t,e],arguments.length),!1===t&&void 0===e)return this;const n="string"==typeof t?t:Ie(this,ue,"f");return this.boolean(n),this.describe(n,e||Ie(this,ke,"f").deferY18nLookup("Show hidden options")),Ie(this,Fe,"f").showHiddenOpt=n,this}showHidden(t,e){return this.addShowHiddenOpt(t,e)}alias(t,e){return _t("<object|string|array> [string|array]",[t,e],arguments.length),this[Je](this.alias.bind(this),"alias",t,e),this}array(t){return _t("<array|string>",[t],arguments.length),this[Ke]("array",t),this[Cn](t),this}boolean(t){return _t("<array|string>",[t],arguments.length),this[Ke]("boolean",t),this[Cn](t),this}check(t,e){return _t("<function> [boolean]",[t,e],arguments.length),this.middleware(((e,n)=>Pt((()=>t(e,n.getOptions())),(n=>(n?("string"==typeof n||n instanceof Error)&&Ie(this,ke,"f").fail(n.toString(),n):Ie(this,ke,"f").fail(Ie(this,Oe,"f").y18n.__("Argument check failed: %s",t.toString())),e)),(t=>(Ie(this,ke,"f").fail(t.message?t.message:t.toString(),t),e)))),!1,e),this}choices(t,e){return _t("<object|string|array> [string|array]",[t,e],arguments.length),this[Je](this.choices.bind(this),"choices",t,e),this}coerce(t,e){if(_t("<object|string|array> [function]",[t,e],arguments.length),Array.isArray(t)){if(!e)throw new Ot("coerce callback must be provided");for(const n of t)this.coerce(n,e);return this}if("object"==typeof t){for(const e of Object.keys(t))this.coerce(e,t[e]);return this}if(!e)throw new Ot("coerce callback must be provided");const n=t;return Ie(this,Fe,"f").key[n]=!0,Ie(this,ce,"f").addCoerceMiddleware(((t,s)=>{var i;const u=null!==(i=s.getAliases()[n])&&void 0!==i?i:[],r=[n,...u].filter((e=>Object.prototype.hasOwnProperty.call(t,e)));return 0===r.length?t:Pt((()=>e(t[r[0]])),(e=>(r.forEach((n=>{t[n]=e})),t)),(t=>{throw new Ot(t.message)}))}),n),this}conflicts(t,e){return _t("<string|object> [string|array]",[t,e],arguments.length),Ie(this,$e,"f").conflicts(t,e),this}config(t="config",e,n){return _t("[object|string] [string|function] [function]",[t,e,n],arguments.length),"object"!=typeof t||Array.isArray(t)?("function"==typeof e&&(n=e,e=void 0),this.describe(t,e||Ie(this,ke,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(t)?t:[t]).forEach((t=>{Ie(this,Fe,"f").config[t]=n||!0})),this):(t=Qt(t,Ie(this,ee,"f"),this[Ue]()["deep-merge-config"]||!1,Ie(this,Oe,"f")),Ie(this,Fe,"f").configObjects=(Ie(this,Fe,"f").configObjects||[]).concat(t),this)}completion(t,e,n){return _t("[string] [string|boolean|function] [function]",[t,e,n],arguments.length),"function"==typeof e&&(n=e,e=void 0),Pe(this,ie,t||Ie(this,ie,"f")||"completion","f"),e||!1===e||(e="generate completion script"),this.command(Ie(this,ie,"f"),e),n&&Ie(this,se,"f").registerFunction(n),this}command(t,e,n,s,i,u){return _t("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[t,e,n,s,i,u],arguments.length),Ie(this,te,"f").addHandler(t,e,n,s,i,u),this}commands(t,e,n,s,i,u){return this.command(t,e,n,s,i,u)}commandDir(t,e){_t("<string> [object]",[t,e],arguments.length);const n=Ie(this,Ce,"f")||Ie(this,Oe,"f").require;return Ie(this,te,"f").addDirectory(t,n,Ie(this,Oe,"f").getCallerFile(),e),this}count(t){return _t("<array|string>",[t],arguments.length),this[Ke]("count",t),this[Cn](t),this}default(t,e,n){return _t("<object|string|array> [*] [string]",[t,e,n],arguments.length),n&&(At(t,Ie(this,Oe,"f")),Ie(this,Fe,"f").defaultDescription[t]=n),"function"==typeof e&&(At(t,Ie(this,Oe,"f")),Ie(this,Fe,"f").defaultDescription[t]||(Ie(this,Fe,"f").defaultDescription[t]=Ie(this,ke,"f").functionDescription(e)),e=e.call()),this[Ze](this.default.bind(this),"default",t,e),this}defaults(t,e,n){return this.default(t,e,n)}demandCommand(t=1,e,n,s){return _t("[number] [number|string] [string|null|undefined] [string|null|undefined]",[t,e,n,s],arguments.length),"number"!=typeof e&&(n=e,e=1/0),this.global("_",!1),Ie(this,Fe,"f").demandedCommands._={min:t,max:e,minMsg:n,maxMsg:s},this}demand(t,e,n){return Array.isArray(e)?(e.forEach((t=>{vt(n,!0,Ie(this,Oe,"f")),this.demandOption(t,n)})),e=1/0):"number"!=typeof e&&(n=e,e=1/0),"number"==typeof t?(vt(n,!0,Ie(this,Oe,"f")),this.demandCommand(t,e,n,n)):Array.isArray(t)?t.forEach((t=>{vt(n,!0,Ie(this,Oe,"f")),this.demandOption(t,n)})):"string"==typeof n?this.demandOption(t,n):!0!==n&&void 0!==n||this.demandOption(t),this}demandOption(t,e){return _t("<object|string|array> [string]",[t,e],arguments.length),this[Ze](this.demandOption.bind(this),"demandedOptions",t,e),this}deprecateOption(t,e){return _t("<string> [string|boolean]",[t,e],arguments.length),Ie(this,Fe,"f").deprecatedOptions[t]=e,this}describe(t,e){return _t("<object|string|array> [string]",[t,e],arguments.length),this[tn](t,!0),Ie(this,ke,"f").describe(t,e),this}detectLocale(t){return _t("<boolean>",[t],arguments.length),Pe(this,oe,t,"f"),this}env(t){return _t("[string|boolean]",[t],arguments.length),!1===t?delete Ie(this,Fe,"f").envPrefix:Ie(this,Fe,"f").envPrefix=t||"",this}epilogue(t){return _t("<string>",[t],arguments.length),Ie(this,ke,"f").epilog(t),this}epilog(t){return this.epilogue(t)}example(t,e){return _t("<string|array> [string]",[t,e],arguments.length),Array.isArray(t)?t.forEach((t=>this.example(...t))):Ie(this,ke,"f").example(t,e),this}exit(t,e){Pe(this,fe,!0,"f"),Pe(this,re,e,"f"),Ie(this,De,"f")&&Ie(this,Oe,"f").process.exit(t)}exitProcess(t=!0){return _t("[boolean]",[t],arguments.length),Pe(this,De,t,"f"),this}fail(t){if(_t("<function|boolean>",[t],arguments.length),"boolean"==typeof t&&!1!==t)throw new Ot("Invalid first argument. Expected function or boolean 'false'");return Ie(this,ke,"f").failFn(t),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(t,e){return _t("<array> [function]",[t,e],arguments.length),e?Ie(this,se,"f").getCompletion(t,e):new Promise(((e,n)=>{Ie(this,se,"f").getCompletion(t,((t,s)=>{t?n(t):e(s)}))}))}getDemandedOptions(){return _t([],0),Ie(this,Fe,"f").demandedOptions}getDemandedCommands(){return _t([],0),Ie(this,Fe,"f").demandedCommands}getDeprecatedOptions(){return _t([],0),Ie(this,Fe,"f").deprecatedOptions}getDetectLocale(){return Ie(this,oe,"f")}getExitProcess(){return Ie(this,De,"f")}getGroups(){return Object.assign({},Ie(this,he,"f"),Ie(this,Ae,"f"))}getHelp(){if(Pe(this,fe,!0,"f"),!Ie(this,ke,"f").hasCachedHelpMessage()){if(!this.parsed){const t=this[gn](Ie(this,Be,"f"),void 0,void 0,0,!0);if(wt(t))return t.then((()=>Ie(this,ke,"f").help()))}const t=Ie(this,te,"f").runDefaultBuilderOn(this);if(wt(t))return t.then((()=>Ie(this,ke,"f").help()))}return Promise.resolve(Ie(this,ke,"f").help())}getOptions(){return Ie(this,Fe,"f")}getStrict(){return Ie(this,je,"f")}getStrictCommands(){return Ie(this,xe,"f")}getStrictOptions(){return Ie(this,_e,"f")}global(t,e){return _t("<string|array> [boolean]",[t,e],arguments.length),t=[].concat(t),!1!==e?Ie(this,Fe,"f").local=Ie(this,Fe,"f").local.filter((e=>-1===t.indexOf(e))):t.forEach((t=>{Ie(this,Fe,"f").local.includes(t)||Ie(this,Fe,"f").local.push(t)})),this}group(t,e){_t("<string|array> <string>",[t,e],arguments.length);const n=Ie(this,Ae,"f")[e]||Ie(this,he,"f")[e];Ie(this,Ae,"f")[e]&&delete Ie(this,Ae,"f")[e];const s={};return Ie(this,he,"f")[e]=(n||[]).concat(t).filter((t=>!s[t]&&(s[t]=!0))),this}hide(t){return _t("<string>",[t],arguments.length),Ie(this,Fe,"f").hiddenOptions.push(t),this}implies(t,e){return _t("<string|object> [number|string|array]",[t,e],arguments.length),Ie(this,$e,"f").implies(t,e),this}locale(t){return _t("[string]",[t],arguments.length),void 0===t?(this[qe](),Ie(this,Oe,"f").y18n.getLocale()):(Pe(this,oe,!1,"f"),Ie(this,Oe,"f").y18n.setLocale(t),this)}middleware(t,e,n){return Ie(this,ce,"f").addMiddleware(t,!!e,n)}nargs(t,e){return _t("<string|object|array> [number]",[t,e],arguments.length),this[Ze](this.nargs.bind(this),"narg",t,e),this}normalize(t){return _t("<array|string>",[t],arguments.length),this[Ke]("normalize",t),this}number(t){return _t("<array|string>",[t],arguments.length),this[Ke]("number",t),this[Cn](t),this}option(t,e){if(_t("<string|object> [object]",[t,e],arguments.length),"object"==typeof t)Object.keys(t).forEach((e=>{this.options(e,t[e])}));else{"object"!=typeof e&&(e={}),this[Cn](t),!Ie(this,Se,"f")||"version"!==t&&"version"!==(null==e?void 0:e.alias)||this[ze](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join("\n"),void 0,"versionWarning"),Ie(this,Fe,"f").key[t]=!0,e.alias&&this.alias(t,e.alias);const n=e.deprecate||e.deprecated;n&&this.deprecateOption(t,n);const s=e.demand||e.required||e.require;s&&this.demand(t,s),e.demandOption&&this.demandOption(t,"string"==typeof e.demandOption?e.demandOption:void 0),e.conflicts&&this.conflicts(t,e.conflicts),"default"in e&&this.default(t,e.default),void 0!==e.implies&&this.implies(t,e.implies),void 0!==e.nargs&&this.nargs(t,e.nargs),e.config&&this.config(t,e.configParser),e.normalize&&this.normalize(t),e.choices&&this.choices(t,e.choices),e.coerce&&this.coerce(t,e.coerce),e.group&&this.group(t,e.group),(e.boolean||"boolean"===e.type)&&(this.boolean(t),e.alias&&this.boolean(e.alias)),(e.array||"array"===e.type)&&(this.array(t),e.alias&&this.array(e.alias)),(e.number||"number"===e.type)&&(this.number(t),e.alias&&this.number(e.alias)),(e.string||"string"===e.type)&&(this.string(t),e.alias&&this.string(e.alias)),(e.count||"count"===e.type)&&this.count(t),"boolean"==typeof e.global&&this.global(t,e.global),e.defaultDescription&&(Ie(this,Fe,"f").defaultDescription[t]=e.defaultDescription),e.skipValidation&&this.skipValidation(t);const i=e.describe||e.description||e.desc,u=Ie(this,ke,"f").getDescriptions();Object.prototype.hasOwnProperty.call(u,t)&&"string"!=typeof i||this.describe(t,i),e.hidden&&this.hide(t),e.requiresArg&&this.requiresArg(t)}return this}options(t,e){return this.option(t,e)}parse(t,e,n){_t("[string|array] [function|boolean|object] [function]",[t,e,n],arguments.length),this[He](),void 0===t&&(t=Ie(this,Be,"f")),"object"==typeof e&&(Pe(this,be,e,"f"),e=n),"function"==typeof e&&(Pe(this,ye,e,"f"),e=!1),e||Pe(this,Be,t,"f"),Ie(this,ye,"f")&&Pe(this,De,!1,"f");const s=this[gn](t,!!e),i=this.parsed;return Ie(this,se,"f").setParsed(this.parsed),wt(s)?s.then((t=>(Ie(this,ye,"f")&&Ie(this,ye,"f").call(this,Ie(this,re,"f"),t,Ie(this,me,"f")),t))).catch((t=>{throw Ie(this,ye,"f")&&Ie(this,ye,"f")(t,this.parsed.argv,Ie(this,me,"f")),t})).finally((()=>{this[en](),this.parsed=i})):(Ie(this,ye,"f")&&Ie(this,ye,"f").call(this,Ie(this,re,"f"),s,Ie(this,me,"f")),this[en](),this.parsed=i,s)}parseAsync(t,e,n){const s=this.parse(t,e,n);return wt(s)?s:Promise.resolve(s)}parseSync(t,e,n){const s=this.parse(t,e,n);if(wt(s))throw new Ot(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(t){return _t("<object>",[t],arguments.length),Pe(this,Ee,t,"f"),this}pkgConf(t,e){_t("<string> [string]",[t,e],arguments.length);let n=null;const s=this[Ye](e||Ie(this,ee,"f"));return s[t]&&"object"==typeof s[t]&&(n=Qt(s[t],e||Ie(this,ee,"f"),this[Ue]()["deep-merge-config"]||!1,Ie(this,Oe,"f")),Ie(this,Fe,"f").configObjects=(Ie(this,Fe,"f").configObjects||[]).concat(n)),this}positional(t,e){_t("<string> <object>",[t,e],arguments.length);const n=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];e=zt(e,((t,e)=>!("type"===t&&!["string","number","boolean"].includes(e))&&n.includes(t)));const s=Ie(this,ne,"f").fullCommands[Ie(this,ne,"f").fullCommands.length-1],i=s?Ie(this,te,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return Bt(i).forEach((n=>{const s=i[n];Array.isArray(s)?-1!==s.indexOf(t)&&(e[n]=!0):s[t]&&!(n in e)&&(e[n]=s[t])})),this.group(t,Ie(this,ke,"f").getPositionalGroupName()),this.option(t,e)}recommendCommands(t=!0){return _t("[boolean]",[t],arguments.length),Pe(this,we,t,"f"),this}required(t,e,n){return this.demand(t,e,n)}require(t,e,n){return this.demand(t,e,n)}requiresArg(t){return _t("<array|string|object> [number]",[t],arguments.length),"string"==typeof t&&Ie(this,Fe,"f").narg[t]||this[Ze](this.requiresArg.bind(this),"narg",t,NaN),this}showCompletionScript(t,e){return _t("[string] [string]",[t,e],arguments.length),t=t||this.$0,Ie(this,ge,"f").log(Ie(this,se,"f").generateCompletionScript(t,e||Ie(this,ie,"f")||"completion")),this}showHelp(t){if(_t("[string|function]",[t],arguments.length),Pe(this,fe,!0,"f"),!Ie(this,ke,"f").hasCachedHelpMessage()){if(!this.parsed){const e=this[gn](Ie(this,Be,"f"),void 0,void 0,0,!0);if(wt(e))return e.then((()=>{Ie(this,ke,"f").showHelp(t)})),this}const e=Ie(this,te,"f").runDefaultBuilderOn(this);if(wt(e))return e.then((()=>{Ie(this,ke,"f").showHelp(t)})),this}return Ie(this,ke,"f").showHelp(t),this}scriptName(t){return this.customScriptName=!0,this.$0=t,this}showHelpOnFail(t,e){return _t("[boolean|string] [string]",[t,e],arguments.length),Ie(this,ke,"f").showHelpOnFail(t,e),this}showVersion(t){return _t("[string|function]",[t],arguments.length),Ie(this,ke,"f").showVersion(t),this}skipValidation(t){return _t("<array|string>",[t],arguments.length),this[Ke]("skipValidation",t),this}strict(t){return _t("[boolean]",[t],arguments.length),Pe(this,je,!1!==t,"f"),this}strictCommands(t){return _t("[boolean]",[t],arguments.length),Pe(this,xe,!1!==t,"f"),this}strictOptions(t){return _t("[boolean]",[t],arguments.length),Pe(this,_e,!1!==t,"f"),this}string(t){return _t("<array|string>",[t],arguments.length),this[Ke]("string",t),this[Cn](t),this}terminalWidth(){return _t([],0),Ie(this,Oe,"f").process.stdColumns}updateLocale(t){return this.updateStrings(t)}updateStrings(t){return _t("<object>",[t],arguments.length),Pe(this,oe,!1,"f"),Ie(this,Oe,"f").y18n.updateLocale(t),this}usage(t,e,n,s){if(_t("<string|null|undefined> [string|boolean] [function|object] [function]",[t,e,n,s],arguments.length),void 0!==e){if(vt(t,null,Ie(this,Oe,"f")),(t||"").match(/^\$0( |$)/))return this.command(t,e,n,s);throw new Ot(".usage() description must start with $0 if being used as alias for .command()")}return Ie(this,ke,"f").usage(t),this}usageConfiguration(t){return _t("<object>",[t],arguments.length),Pe(this,Me,t,"f"),this}version(t,e,n){const s="version";if(_t("[boolean|string] [string] [string]",[t,e,n],arguments.length),Ie(this,Se,"f")&&(this[Le](Ie(this,Se,"f")),Ie(this,ke,"f").version(void 0),Pe(this,Se,null,"f")),0===arguments.length)n=this[Ge](),t=s;else if(1===arguments.length){if(!1===t)return this;n=t,t=s}else 2===arguments.length&&(n=e,e=void 0);return Pe(this,Se,"string"==typeof t?t:s,"f"),e=e||Ie(this,ke,"f").deferY18nLookup("Show version number"),Ie(this,ke,"f").version(n||void 0),this.boolean(Ie(this,Se,"f")),this.describe(Ie(this,Se,"f"),e),this}wrap(t){return _t("<number|null|undefined>",[t],arguments.length),Ie(this,ke,"f").wrap(t),this}[(te=new WeakMap,ee=new WeakMap,ne=new WeakMap,se=new WeakMap,ie=new WeakMap,ue=new WeakMap,re=new WeakMap,oe=new WeakMap,ae=new WeakMap,De=new WeakMap,le=new WeakMap,ce=new WeakMap,he=new WeakMap,fe=new WeakMap,de=new WeakMap,pe=new WeakMap,ge=new WeakMap,me=new WeakMap,Fe=new WeakMap,Ce=new WeakMap,Ee=new WeakMap,ye=new WeakMap,be=new WeakMap,ve=new WeakMap,Ae=new WeakMap,Be=new WeakMap,we=new WeakMap,Oe=new WeakMap,je=new WeakMap,xe=new WeakMap,_e=new WeakMap,ke=new WeakMap,Me=new WeakMap,Se=new WeakMap,$e=new WeakMap,Ne)](t){if(!t._||!t["--"])return t;t._.push.apply(t._,t["--"]);try{delete t["--"]}catch(t){}return t}[We](){return{log:(...t)=>{this[cn]()||console.log(...t),Pe(this,fe,!0,"f"),Ie(this,me,"f").length&&Pe(this,me,Ie(this,me,"f")+"\n","f"),Pe(this,me,Ie(this,me,"f")+t.join(" "),"f")},error:(...t)=>{this[cn]()||console.error(...t),Pe(this,fe,!0,"f"),Ie(this,me,"f").length&&Pe(this,me,Ie(this,me,"f")+"\n","f"),Pe(this,me,Ie(this,me,"f")+t.join(" "),"f")}}}[Le](t){Bt(Ie(this,Fe,"f")).forEach((e=>{if("configObjects"===e)return;const n=Ie(this,Fe,"f")[e];Array.isArray(n)?n.includes(t)&&n.splice(n.indexOf(t),1):"object"==typeof n&&delete n[t]})),delete Ie(this,ke,"f").getDescriptions()[t]}[ze](t,e,n){Ie(this,ae,"f")[n]||(Ie(this,Oe,"f").process.emitWarning(t,e),Ie(this,ae,"f")[n]=!0)}[He](){Ie(this,le,"f").push({options:Ie(this,Fe,"f"),configObjects:Ie(this,Fe,"f").configObjects.slice(0),exitProcess:Ie(this,De,"f"),groups:Ie(this,he,"f"),strict:Ie(this,je,"f"),strictCommands:Ie(this,xe,"f"),strictOptions:Ie(this,_e,"f"),completionCommand:Ie(this,ie,"f"),output:Ie(this,me,"f"),exitError:Ie(this,re,"f"),hasOutput:Ie(this,fe,"f"),parsed:this.parsed,parseFn:Ie(this,ye,"f"),parseContext:Ie(this,be,"f")}),Ie(this,ke,"f").freeze(),Ie(this,$e,"f").freeze(),Ie(this,te,"f").freeze(),Ie(this,ce,"f").freeze()}[Te](){let t,e="";return t=/\b(node|iojs|electron)(\.exe)?$/.test(Ie(this,Oe,"f").process.argv()[0])?Ie(this,Oe,"f").process.argv().slice(1,2):Ie(this,Oe,"f").process.argv().slice(0,1),e=t.map((t=>{const e=this[dn](Ie(this,ee,"f"),t);return t.match(/^(\/|([a-zA-Z]:)?\\)/)&&e.length<t.length?e:t})).join(" ").trim(),Ie(this,Oe,"f").getEnv("_")&&Ie(this,Oe,"f").getProcessArgvBin()===Ie(this,Oe,"f").getEnv("_")&&(e=Ie(this,Oe,"f").getEnv("_").replace(`${Ie(this,Oe,"f").path.dirname(Ie(this,Oe,"f").process.execPath())}/`,"")),e}[Ue](){return Ie(this,Ee,"f")}[Re](){return Ie(this,Me,"f")}[qe](){if(!Ie(this,oe,"f"))return;const t=Ie(this,Oe,"f").getEnv("LC_ALL")||Ie(this,Oe,"f").getEnv("LC_MESSAGES")||Ie(this,Oe,"f").getEnv("LANG")||Ie(this,Oe,"f").getEnv("LANGUAGE")||"en_US";this.locale(t.replace(/[.:].*/,""))}[Ge](){return this[Ye]().version||"unknown"}[Ve](t){const e=t["--"]?t["--"]:t._;for(let t,n=0;void 0!==(t=e[n]);n++)Ie(this,Oe,"f").Parser.looksLikeNumber(t)&&Number.isSafeInteger(Math.floor(parseFloat(`${t}`)))&&(e[n]=Number(t));return t}[Ye](t){const e=t||"*";if(Ie(this,ve,"f")[e])return Ie(this,ve,"f")[e];let n={};try{let e=t||Ie(this,Oe,"f").mainFilename;Ie(this,Oe,"f").path.extname(e)&&(e=Ie(this,Oe,"f").path.dirname(e));const s=Ie(this,Oe,"f").findUp(e,((t,e)=>e.includes("package.json")?"package.json":void 0));vt(s,void 0,Ie(this,Oe,"f")),n=JSON.parse(Ie(this,Oe,"f").readFileSync(s,"utf8"))}catch(t){}return Ie(this,ve,"f")[e]=n||{},Ie(this,ve,"f")[e]}[Ke](t,e){(e=[].concat(e)).forEach((e=>{e=this[Xe](e),Ie(this,Fe,"f")[t].push(e)}))}[Ze](t,e,n,s){this[Qe](t,e,n,s,((t,e,n)=>{Ie(this,Fe,"f")[t][e]=n}))}[Je](t,e,n,s){this[Qe](t,e,n,s,((t,e,n)=>{Ie(this,Fe,"f")[t][e]=(Ie(this,Fe,"f")[t][e]||[]).concat(n)}))}[Qe](t,e,n,s,i){if(Array.isArray(n))n.forEach((e=>{t(e,s)}));else if((t=>"object"==typeof t)(n))for(const e of Bt(n))t(e,n[e]);else i(e,this[Xe](n),s)}[Xe](t){return"__proto__"===t?"___proto___":t}[tn](t,e){return this[Ze](this[tn].bind(this),"key",t,e),this}[en](){var t,e,n,s,i,u,r,o,a,D,l,c;const h=Ie(this,le,"f").pop();let f;vt(h,void 0,Ie(this,Oe,"f")),t=this,e=this,n=this,s=this,i=this,u=this,r=this,o=this,a=this,D=this,l=this,c=this,({options:{set value(e){Pe(t,Fe,e,"f")}}.value,configObjects:f,exitProcess:{set value(t){Pe(e,De,t,"f")}}.value,groups:{set value(t){Pe(n,he,t,"f")}}.value,output:{set value(t){Pe(s,me,t,"f")}}.value,exitError:{set value(t){Pe(i,re,t,"f")}}.value,hasOutput:{set value(t){Pe(u,fe,t,"f")}}.value,parsed:this.parsed,strict:{set value(t){Pe(r,je,t,"f")}}.value,strictCommands:{set value(t){Pe(o,xe,t,"f")}}.value,strictOptions:{set value(t){Pe(a,_e,t,"f")}}.value,completionCommand:{set value(t){Pe(D,ie,t,"f")}}.value,parseFn:{set value(t){Pe(l,ye,t,"f")}}.value,parseContext:{set value(t){Pe(c,be,t,"f")}}.value}=h),Ie(this,Fe,"f").configObjects=f,Ie(this,ke,"f").unfreeze(),Ie(this,$e,"f").unfreeze(),Ie(this,te,"f").unfreeze(),Ie(this,ce,"f").unfreeze()}[nn](t,e){return Pt(e,(e=>(t(e),e)))}getInternalMethods(){return{getCommandInstance:this[sn].bind(this),getContext:this[un].bind(this),getHasOutput:this[rn].bind(this),getLoggerInstance:this[on].bind(this),getParseContext:this[an].bind(this),getParserConfiguration:this[Ue].bind(this),getUsageConfiguration:this[Re].bind(this),getUsageInstance:this[Dn].bind(this),getValidationInstance:this[ln].bind(this),hasParseCallback:this[cn].bind(this),isGlobalContext:this[hn].bind(this),postProcess:this[fn].bind(this),reset:this[pn].bind(this),runValidation:this[mn].bind(this),runYargsParserAndExecuteCommands:this[gn].bind(this),setHasOutput:this[Fn].bind(this)}}[sn](){return Ie(this,te,"f")}[un](){return Ie(this,ne,"f")}[rn](){return Ie(this,fe,"f")}[on](){return Ie(this,ge,"f")}[an](){return Ie(this,be,"f")||{}}[Dn](){return Ie(this,ke,"f")}[ln](){return Ie(this,$e,"f")}[cn](){return!!Ie(this,ye,"f")}[hn](){return Ie(this,pe,"f")}[fn](t,e,n,s){if(n)return t;if(wt(t))return t;e||(t=this[Ne](t));return(this[Ue]()["parse-positional-numbers"]||void 0===this[Ue]()["parse-positional-numbers"])&&(t=this[Ve](t)),s&&(t=$t(t,this,Ie(this,ce,"f").getMiddleware(),!1)),t}[pn](t={}){Pe(this,Fe,Ie(this,Fe,"f")||{},"f");const e={};e.local=Ie(this,Fe,"f").local||[],e.configObjects=Ie(this,Fe,"f").configObjects||[];const n={};e.local.forEach((e=>{n[e]=!0,(t[e]||[]).forEach((t=>{n[t]=!0}))})),Object.assign(Ie(this,Ae,"f"),Object.keys(Ie(this,he,"f")).reduce(((t,e)=>{const s=Ie(this,he,"f")[e].filter((t=>!(t in n)));return s.length>0&&(t[e]=s),t}),{})),Pe(this,he,{},"f");return["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"].forEach((t=>{e[t]=(Ie(this,Fe,"f")[t]||[]).filter((t=>!n[t]))})),["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"].forEach((t=>{e[t]=zt(Ie(this,Fe,"f")[t],(t=>!n[t]))})),e.envPrefix=Ie(this,Fe,"f").envPrefix,Pe(this,Fe,e,"f"),Pe(this,ke,Ie(this,ke,"f")?Ie(this,ke,"f").reset(n):Ut(this,Ie(this,Oe,"f")),"f"),Pe(this,$e,Ie(this,$e,"f")?Ie(this,$e,"f").reset(n):function(t,e,n){const s=n.y18n.__,i=n.y18n.__n,u={nonOptionCount:function(n){const s=t.getDemandedCommands(),u=n._.length+(n["--"]?n["--"].length:0)-t.getInternalMethods().getContext().commands.length;s._&&(u<s._.min||u>s._.max)&&(u<s._.min?void 0!==s._.minMsg?e.fail(s._.minMsg?s._.minMsg.replace(/\$0/g,u.toString()).replace(/\$1/,s._.min.toString()):null):e.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",u,u.toString(),s._.min.toString())):u>s._.max&&(void 0!==s._.maxMsg?e.fail(s._.maxMsg?s._.maxMsg.replace(/\$0/g,u.toString()).replace(/\$1/,s._.max.toString()):null):e.fail(i("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",u,u.toString(),s._.max.toString()))))},positionalCount:function(t,n){n<t&&e.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",n,n+"",t+""))},requiredArguments:function(t,n){let s=null;for(const e of Object.keys(n))Object.prototype.hasOwnProperty.call(t,e)&&void 0!==t[e]||(s=s||{},s[e]=n[e]);if(s){const t=[];for(const e of Object.keys(s)){const n=s[e];n&&t.indexOf(n)<0&&t.push(n)}const n=t.length?`\n${t.join("\n")}`:"";e.fail(i("Missing required argument: %s","Missing required arguments: %s",Object.keys(s).length,Object.keys(s).join(", ")+n))}},unknownArguments:function(n,s,r,o,a=!0){var D;const l=t.getInternalMethods().getCommandInstance().getCommands(),c=[],h=t.getInternalMethods().getContext();if(Object.keys(n).forEach((e=>{Kt.includes(e)||Object.prototype.hasOwnProperty.call(r,e)||Object.prototype.hasOwnProperty.call(t.getInternalMethods().getParseContext(),e)||u.isValidAndSomeAliasIsNotNew(e,s)||c.push(e)})),a&&(h.commands.length>0||l.length>0||o)&&n._.slice(h.commands.length).forEach((t=>{l.includes(""+t)||c.push(""+t)})),a){const e=(null===(D=t.getDemandedCommands()._)||void 0===D?void 0:D.max)||0,s=h.commands.length+e;s<n._.length&&n._.slice(s).forEach((t=>{t=String(t),h.commands.includes(t)||c.includes(t)||c.push(t)}))}c.length&&e.fail(i("Unknown argument: %s","Unknown arguments: %s",c.length,c.map((t=>t.trim()?t:`"${t}"`)).join(", ")))},unknownCommands:function(n){const s=t.getInternalMethods().getCommandInstance().getCommands(),u=[],r=t.getInternalMethods().getContext();return(r.commands.length>0||s.length>0)&&n._.slice(r.commands.length).forEach((t=>{s.includes(""+t)||u.push(""+t)})),u.length>0&&(e.fail(i("Unknown command: %s","Unknown commands: %s",u.length,u.join(", "))),!0)},isValidAndSomeAliasIsNotNew:function(e,n){if(!Object.prototype.hasOwnProperty.call(n,e))return!1;const s=t.parsed.newAliases;return[e,...n[e]].some((t=>!Object.prototype.hasOwnProperty.call(s,t)||!s[e]))},limitedChoices:function(n){const i=t.getOptions(),u={};if(!Object.keys(i.choices).length)return;Object.keys(n).forEach((t=>{-1===Kt.indexOf(t)&&Object.prototype.hasOwnProperty.call(i.choices,t)&&[].concat(n[t]).forEach((e=>{-1===i.choices[t].indexOf(e)&&void 0!==e&&(u[t]=(u[t]||[]).concat(e))}))}));const r=Object.keys(u);if(!r.length)return;let o=s("Invalid values:");r.forEach((t=>{o+=`\n  ${s("Argument: %s, Given: %s, Choices: %s",t,e.stringifiedValues(u[t]),e.stringifiedValues(i.choices[t]))}`})),e.fail(o)}};let r={};function o(t,e){const n=Number(e);return"number"==typeof(e=isNaN(n)?e:n)?e=t._.length>=e:e.match(/^--no-.+/)?(e=e.match(/^--no-(.+)/)[1],e=!Object.prototype.hasOwnProperty.call(t,e)):e=Object.prototype.hasOwnProperty.call(t,e),e}u.implies=function(e,s){_t("<string|object> [array|number|string]",[e,s],arguments.length),"object"==typeof e?Object.keys(e).forEach((t=>{u.implies(t,e[t])})):(t.global(e),r[e]||(r[e]=[]),Array.isArray(s)?s.forEach((t=>u.implies(e,t))):(vt(s,void 0,n),r[e].push(s)))},u.getImplied=function(){return r},u.implications=function(t){const n=[];if(Object.keys(r).forEach((e=>{const s=e;(r[e]||[]).forEach((e=>{let i=s;const u=e;i=o(t,i),e=o(t,e),i&&!e&&n.push(` ${s} -> ${u}`)}))})),n.length){let t=`${s("Implications failed:")}\n`;n.forEach((e=>{t+=e})),e.fail(t)}};let a={};u.conflicts=function(e,n){_t("<string|object> [array|string]",[e,n],arguments.length),"object"==typeof e?Object.keys(e).forEach((t=>{u.conflicts(t,e[t])})):(t.global(e),a[e]||(a[e]=[]),Array.isArray(n)?n.forEach((t=>u.conflicts(e,t))):a[e].push(n))},u.getConflicting=()=>a,u.conflicting=function(i){Object.keys(i).forEach((t=>{a[t]&&a[t].forEach((n=>{n&&void 0!==i[t]&&void 0!==i[n]&&e.fail(s("Arguments %s and %s are mutually exclusive",t,n))}))})),t.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(a).forEach((t=>{a[t].forEach((u=>{u&&void 0!==i[n.Parser.camelCase(t)]&&void 0!==i[n.Parser.camelCase(u)]&&e.fail(s("Arguments %s and %s are mutually exclusive",t,u))}))}))},u.recommendCommands=function(t,n){n=n.sort(((t,e)=>e.length-t.length));let i=null,u=1/0;for(let e,s=0;void 0!==(e=n[s]);s++){const n=Yt(t,e);n<=3&&n<u&&(u=n,i=e)}i&&e.fail(s("Did you mean %s?",i))},u.reset=function(t){return r=zt(r,(e=>!t[e])),a=zt(a,(e=>!t[e])),u};const D=[];return u.freeze=function(){D.push({implied:r,conflicting:a})},u.unfreeze=function(){const t=D.pop();vt(t,void 0,n),({implied:r,conflicting:a}=t)},u}(this,Ie(this,ke,"f"),Ie(this,Oe,"f")),"f"),Pe(this,te,Ie(this,te,"f")?Ie(this,te,"f").reset():function(t,e,n,s){return new Nt(t,e,n,s)}(Ie(this,ke,"f"),Ie(this,$e,"f"),Ie(this,ce,"f"),Ie(this,Oe,"f")),"f"),Ie(this,se,"f")||Pe(this,se,function(t,e,n,s){return new Vt(t,e,n,s)}(this,Ie(this,ke,"f"),Ie(this,te,"f"),Ie(this,Oe,"f")),"f"),Ie(this,ce,"f").reset(),Pe(this,ie,null,"f"),Pe(this,me,"","f"),Pe(this,re,null,"f"),Pe(this,fe,!1,"f"),this.parsed=!1,this}[dn](t,e){return Ie(this,Oe,"f").path.relative(t,e)}[gn](t,e,n,s=0,i=!1){var u,r,o,a;let D=!!n||i;t=t||Ie(this,Be,"f"),Ie(this,Fe,"f").__=Ie(this,Oe,"f").y18n.__,Ie(this,Fe,"f").configuration=this[Ue]();const l=!!Ie(this,Fe,"f").configuration["populate--"],c=Object.assign({},Ie(this,Fe,"f").configuration,{"populate--":!0}),h=Ie(this,Oe,"f").Parser.detailed(t,Object.assign({},Ie(this,Fe,"f"),{configuration:{"parse-positional-numbers":!1,...c}})),f=Object.assign(h.argv,Ie(this,be,"f"));let d;const p=h.aliases;let g=!1,m=!1;Object.keys(f).forEach((t=>{t===Ie(this,de,"f")&&f[t]?g=!0:t===Ie(this,Se,"f")&&f[t]&&(m=!0)})),f.$0=this.$0,this.parsed=h,0===s&&Ie(this,ke,"f").clearCachedHelpMessage();try{if(this[qe](),e)return this[fn](f,l,!!n,!1);if(Ie(this,de,"f")){[Ie(this,de,"f")].concat(p[Ie(this,de,"f")]||[]).filter((t=>t.length>1)).includes(""+f._[f._.length-1])&&(f._.pop(),g=!0)}Pe(this,pe,!1,"f");const c=Ie(this,te,"f").getCommands(),F=!!(null===(u=Ie(this,se,"f"))||void 0===u?void 0:u.completionKey)&&[null===(r=Ie(this,se,"f"))||void 0===r?void 0:r.completionKey,...null!==(a=this.getAliases()[null===(o=Ie(this,se,"f"))||void 0===o?void 0:o.completionKey])&&void 0!==a?a:[]].some((t=>Object.prototype.hasOwnProperty.call(f,t))),C=g||F||i;if(f._.length){if(c.length){let t;for(let e,u=s||0;void 0!==f._[u];u++){if(e=String(f._[u]),c.includes(e)&&e!==Ie(this,ie,"f")){const t=Ie(this,te,"f").runCommand(e,this,h,u+1,i,g||m||i);return this[fn](t,l,!!n,!1)}if(!t&&e!==Ie(this,ie,"f")){t=e;break}}!Ie(this,te,"f").hasDefaultCommand()&&Ie(this,we,"f")&&t&&!C&&Ie(this,$e,"f").recommendCommands(t,c)}Ie(this,ie,"f")&&f._.includes(Ie(this,ie,"f"))&&!F&&(Ie(this,De,"f")&&Ht(!0),this.showCompletionScript(),this.exit(0))}if(Ie(this,te,"f").hasDefaultCommand()&&!C){const t=Ie(this,te,"f").runCommand(null,this,h,0,i,g||m||i);return this[fn](t,l,!!n,!1)}if(F){Ie(this,De,"f")&&Ht(!0);const e=(t=[].concat(t)).slice(t.indexOf(`--${Ie(this,se,"f").completionKey}`)+1);return Ie(this,se,"f").getCompletion(e,((t,e)=>{if(t)throw new Ot(t.message);(e||[]).forEach((t=>{Ie(this,ge,"f").log(t)})),this.exit(0)})),this[fn](f,!l,!!n,!1)}if(Ie(this,fe,"f")||(g?(Ie(this,De,"f")&&Ht(!0),D=!0,this.showHelp((t=>{Ie(this,ge,"f").log(t),this.exit(0)}))):m&&(Ie(this,De,"f")&&Ht(!0),D=!0,Ie(this,ke,"f").showVersion("log"),this.exit(0))),!D&&Ie(this,Fe,"f").skipValidation.length>0&&(D=Object.keys(f).some((t=>Ie(this,Fe,"f").skipValidation.indexOf(t)>=0&&!0===f[t]))),!D){if(h.error)throw new Ot(h.error.message);if(!F){const t=this[mn](p,{},h.error);n||(d=$t(f,this,Ie(this,ce,"f").getMiddleware(),!0)),d=this[nn](t,null!=d?d:f),wt(d)&&!n&&(d=d.then((()=>$t(f,this,Ie(this,ce,"f").getMiddleware(),!1))))}}}catch(t){if(!(t instanceof Ot))throw t;Ie(this,ke,"f").fail(t.message,t)}return this[fn](null!=d?d:f,l,!!n,!0)}[mn](t,e,n,s){const i={...this.getDemandedOptions()};return u=>{if(n)throw new Ot(n.message);Ie(this,$e,"f").nonOptionCount(u),Ie(this,$e,"f").requiredArguments(u,i);let r=!1;Ie(this,xe,"f")&&(r=Ie(this,$e,"f").unknownCommands(u)),Ie(this,je,"f")&&!r?Ie(this,$e,"f").unknownArguments(u,t,e,!!s):Ie(this,_e,"f")&&Ie(this,$e,"f").unknownArguments(u,t,{},!1,!1),Ie(this,$e,"f").limitedChoices(u),Ie(this,$e,"f").implications(u),Ie(this,$e,"f").conflicting(u)}}[Fn](){Pe(this,fe,!0,"f")}[Cn](t){if("string"==typeof t)Ie(this,Fe,"f").key[t]=!0;else for(const e of t)Ie(this,Fe,"f").key[e]=!0}}const yn=(bn=bt,(t=[],e=bn.process.cwd(),n)=>{const s=new En(t,e,n,bn);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s});var bn;const vn=await yn(function(t){return t.slice(ct()+1)}(t.argv)).option("issue-number",{alias:"i",description:"GitHub issue number to process",type:"number",demandOption:!0}).option("planning-model",{alias:"m",description:"LLM for planning code changes. Must use llmlite format: provider/model (e.g., openai/gpt-4.1, azure/gpt-4.1, gemini/gemini-2.5-pro, anthropic/claude-4-sonnet-latest, bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0, vertex/gemini-2.5-pro)",type:"string"}).option("two-staged-planning",{alias:"p",description:"Enable two-staged planning: first select relevant files, then generate detailed implementation plans (increases LLM cost but improves code quality)",type:"boolean",default:!0}).option("reasoning-effort",{alias:"e",description:"Constrains effort on reasoning for planning models. Supported values are low, medium, and high.",type:"string",choices:["low","medium","high"]}).option("coding-tool",{alias:"c",description:"Coding tool to use for making changes",type:"string",choices:["aider","claude-code","codex","gemini"],default:C}).option("aider-extra-args",{alias:"a",description:'Additional arguments to pass to the aider command ("--yes-always --no-check-update --no-show-release-notes" is always applied)',type:"string",default:E}).option("claude-code-extra-args",{description:'Additional arguments to pass to the claude-code command ("--dangerously-skip-permissions" is always applied, "--print" is applied only in CI)',type:"string",default:y}).option("codex-extra-args",{description:"Additional arguments to pass to the codex command (nothing is always applied)",type:"string",default:b}).option("gemini-extra-args",{description:'Additional arguments to pass to the gemini command ("--yolo" is always applied)',type:"string",default:v}).option("repomix-extra-args",{alias:"r",description:"Additional arguments for repomix when generating context",type:"string",default:A}).option("test-command",{alias:"t",description:"Command to run after the coding tool applies changes. If it fails, the assistant will try to fix it.",type:"string"}).option("max-test-attempts",{description:"Maximum number of attempts to fix test failures",type:"number",default:B}).option("dry-run",{alias:"d",description:"Run without making actual changes (no branch creation, no PR)",type:"boolean",default:!1}).option("working-dir",{alias:"w",description:"Working directory path for commands",type:"string"}).help().argv;vn["working-dir"]&&(t.chdir(vn["working-dir"]),console.info(`Changed working directory to: ${t.cwd()}`)),await w({aiderExtraArgs:vn["aider-extra-args"],claudeCodeExtraArgs:vn["claude-code-extra-args"],codexExtraArgs:vn["codex-extra-args"],geminiExtraArgs:vn["gemini-extra-args"],codingTool:vn["coding-tool"],dryRun:vn["dry-run"],twoStagePlanning:vn["two-staged-planning"],issueNumber:vn["issue-number"],maxTestAttempts:vn["max-test-attempts"],planningModel:vn["planning-model"],reasoningEffort:vn["reasoning-effort"],repomixExtraArgs:vn["repomix-extra-args"],testCommand:vn["test-command"]});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
